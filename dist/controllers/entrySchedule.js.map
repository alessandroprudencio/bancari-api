{"version":3,"sources":["../../controllers/entrySchedule.js"],"names":["qrCode","req","res","nome","cpf","placa_veiculo","body","token","jwt","sign","process","env","SECRET_TOKEN","expiresIn","knex","insert","error","console","log","qr_code","qr","image","type","pipe","authenticateEntry","token_acsess","params","verify","err","status","send","message","decode","user","select","where","length"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAG,OAAOC,GAAP,EAAWC,GAAX,KAAiB;AAC5B,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,GAAP;AAAYC,IAAAA;AAAZ,MAA8BJ,GAAG,CAACK,IAAxC;AAEA,MAAIC,KAAK,GAAG,MAAMC,GAAG,CAACC,IAAJ,CAAS;AAACL,IAAAA,GAAG,EAACA,GAAL;AAASD,IAAAA,IAAI,EAACA,IAAd;AAAmBE,IAAAA,aAAa,EAACA;AAAjC,GAAT,EAA0DK,OAAO,CAACC,GAAR,CAAYC,YAAtE,EAAoF;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAApF,CAAlB;;AACD,MAAI;AACC,UAAOC,IAAI,CAAC,iBAAD,CAAJ,CAAwBC,MAAxB,CAA+Bd,GAAG,CAACK,IAAnC,CAAP;AACJ,GAFD,CAEE,OAAOU,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;;AAEA,QAAMG,OAAO,GAAEC,EAAE,CAACC,KAAH,CAASd,KAAT,EAAe;AAACe,IAAAA,IAAI,EAAC;AAAN,GAAf,CAAf;AAEApB,EAAAA,GAAG,CAACoB,IAAJ,CAAS,KAAT;AAEAH,EAAAA,OAAO,CAACI,IAAR,CAAarB,GAAb;AACH,CAfD;;AAiBA,MAAMsB,iBAAiB,GAAG,OAAOvB,GAAP,EAAWC,GAAX,KAAiB;AACvC,MAAIuB,YAAY,GAAIxB,GAAG,CAACyB,MAAJ,CAAWnB,KAA/B;AAED,QAAMC,GAAG,CAACmB,MAAJ,CAAWF,YAAX,EAAwBf,OAAO,CAACC,GAAR,CAAYC,YAApC,EAAkDgB,GAAD,IAAO;AACzD,QAAGA,GAAH,EAAO1B,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAC;AAAT,KAArB;AACV,GAFI,CAAN;AAIC,MAAIC,MAAM,GAAGxB,GAAG,CAACwB,MAAJ,CAAWP,YAAX,CAAb;AACA,MAAIQ,IAAI,GAAI,MAAOnB,IAAI,CAAC,iBAAD,CAAJ,CAAwBoB,MAAxB,CAA+B,MAA/B,EAAuC,KAAvC,EAA8C,eAA9C,EAA+DC,KAA/D,CAAqE;AAAC/B,IAAAA,GAAG,EAAC4B,MAAM,CAAC5B;AAAZ,GAArE,CAAnB;AACA,MAAG6B,IAAI,CAACG,MAAR,EAAgBlC,GAAG,CAAC4B,IAAJ,CAAS;AAACG,IAAAA,IAAI,EAACA,IAAN;AAAYF,IAAAA,OAAO,EAAC;AAApB,GAAT,EAAhB,KACK7B,GAAG,CAAC2B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,IAAAA,OAAO,EAAC;AAAT,GAArB;AAER,CAZD;;QAaS/B,M,GAAAA,M;QAAQwB,iB,GAAAA,iB","sourcesContent":["const qrCode = async (req,res)=>{\r\n    const {nome, cpf, placa_veiculo } = req.body\r\n\r\n    let token = await jwt.sign({cpf:cpf,nome:nome,placa_veiculo:placa_veiculo}, process.env.SECRET_TOKEN, { expiresIn: '1h' })\r\n   try {\r\n        await  knex('entry_schedules').insert(req.body)\r\n   } catch (error) {\r\n       console.log(error)\r\n   }\r\n\r\n    const qr_code =qr.image(token,{type:'svg'})\r\n\r\n    res.type('svg')\r\n\r\n    qr_code.pipe(res)\r\n}\r\n\r\nconst authenticateEntry = async (req,res)=>{\r\n    let token_acsess =  req.params.token\r\n\r\n   await jwt.verify(token_acsess,process.env.SECRET_TOKEN,(err)=>{\r\n        if(err)res.status(401).send({message:'QR CODE Inválido ou expirados !'})\r\n    })\r\n\r\n    let decode = jwt.decode(token_acsess)\r\n    let user =  await  knex('entry_schedules').select('name', 'cpf', 'placa_veiculo').where({cpf:decode.cpf})\r\n    if(user.length) res.send({user:user ,message:\"Entrada autorizada\"})\r\n    else res.status(401).send({message:'Entrada não agendada ou cancelada !'})\r\n   \r\n}\r\nexport { qrCode, authenticateEntry }\r\n"],"file":"entrySchedule.js"}