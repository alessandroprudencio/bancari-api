{"version":3,"sources":["../../controllers/forgotPassword.js"],"names":["forgotPassword","req","res","email","body","existEmail","knex","select","from","where","length","status","send","tokenForgotPassword","jwt","sign","process","env","SECRET_TOKEN","expiresIn","transporter","nodemailer","createTransport","service","EMAIL_service","port","EMAIL_port","auth","user","EMAIL_user","pass","EMAIL_pass","mailOptions","to","subject","html","name","CLIENT_URL","sendMail","err","info"],"mappings":";;;;;;AAAA,MAAMA,cAAc,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACzC,QAAM;AAAEC,IAAAA;AAAF,MAAYF,GAAG,CAACG,IAAtB;AAEA,MAAIC,UAAU,GAAG,MAAMC,IAAI,CAACC,MAAL,CAAY,OAAZ,EAAqB,MAArB,EAA6BC,IAA7B,CAAkC,OAAlC,EAA2CC,KAA3C,CAAiD;AAAEN,IAAAA,KAAK,EAAEF,GAAG,CAACG,IAAJ,CAASD;AAAlB,GAAjD,CAAvB;AACA,MAAI,CAACE,UAAU,CAACK,MAAhB,EAAwBR,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,sBAArB;AAExB,MAAIC,mBAAmB,GAAGC,GAAG,CAACC,IAAJ,CAAS;AAAEZ,IAAAA,KAAK,EAAEA;AAAT,GAAT,EAA2Ba,OAAO,CAACC,GAAR,CAAYC,YAAvC,EAAqD;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAArD,CAA1B;AAEA,QAAMC,WAAW,GAAG,MAAMC,UAAU,CAACC,eAAX,CAA2B;AACnDC,IAAAA,OAAO,EAAEP,OAAO,CAACC,GAAR,CAAYO,aAD8B;AAEnDC,IAAAA,IAAI,EAAET,OAAO,CAACC,GAAR,CAAYS,UAFiC;AAGnDC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAEZ,OAAO,CAACC,GAAR,CAAYY,UADd;AAEJC,MAAAA,IAAI,EAAEd,OAAO,CAACC,GAAR,CAAYc;AAFd;AAH6C,GAA3B,CAA1B;AASA,QAAMC,WAAW,GAAG;AAClBxB,IAAAA,IAAI,EAAE,kCADY;AAElByB,IAAAA,EAAE,EAAE9B,KAFc;AAGlB+B,IAAAA,OAAO,EAAE,kDAHS;AAIlBC,IAAAA,IAAI,EAAG;;iBAEM9B,UAAU,CAAC,CAAD,CAAV,CAAc+B,IAAK;;4EAEwCpB,OAAO,CAACC,GAAR,CAAYoB,UAAW,IAAGxB,mBAAoB,KAAIG,OAAO,CAACC,GAAR,CAAYoB,UAAW,IAAGxB,mBAAoB;;;;;;AARtJ,GAApB;AAgBA,QAAMO,WAAW,CAACkB,QAAZ,CAAqBN,WAArB,EAAkC,CAACO,GAAD,EAAMC,IAAN,KAAe;AACrD,QAAID,GAAJ,EAAS;AACPrC,MAAAA,GAAG,CAACU,IAAJ,CAAS2B,GAAT;AACD,KAFD,MAEO;AACLrC,MAAAA,GAAG,CAACU,IAAJ,CAAU,8DAA6DT,KAAM,EAA7E;AACD;AACF,GANK,CAAN;AAOD,CAxCD;;kBA0CeH,c","sourcesContent":["const forgotPassword = async (req, res) => {\r\n  const { email } = req.body\r\n\r\n  let existEmail = await knex.select('email', 'name').from('users').where({ email: req.body.email })\r\n  if (!existEmail.length) res.status(400).send(\"Email não cadastrado\")\r\n\r\n  let tokenForgotPassword = jwt.sign({ email: email }, process.env.SECRET_TOKEN, { expiresIn: '1h' })\r\n\r\n  const transporter = await nodemailer.createTransport({\r\n    service: process.env.EMAIL_service,\r\n    port: process.env.EMAIL_port,\r\n    auth: {\r\n      user: process.env.EMAIL_user,\r\n      pass: process.env.EMAIL_pass\r\n    }\r\n  })\r\n\r\n  const mailOptions = {\r\n    from: 'gestao_condominio@bancari.com.br',\r\n    to: email,\r\n    subject: 'Recuperação de Senha - Bancari Gestão Condominio',\r\n    html: `\r\n        <html>\r\n           Ola ${existEmail[0].name},  <br><br>\r\n\r\n            <p>Por favor clique no link para redefinir sua senha <a href=\"${process.env.CLIENT_URL}/${tokenForgotPassword}\">${process.env.CLIENT_URL}/${tokenForgotPassword}</a></p>\r\n            <br>\r\n            <br>\r\n            <b>Att, Bancari Gestão de condominios </b>\r\n        </html>\r\n        `\r\n  };\r\n\r\n  await transporter.sendMail(mailOptions, (err, info) => {\r\n    if (err) {\r\n      res.send(err)\r\n    } else {\r\n      res.send(`OK! E-mail para recuperação de senha enviado para o email  ${email}`)\r\n    }\r\n  });\r\n}\r\n\r\nexport default forgotPassword\r\n"],"file":"forgotPassword.js"}