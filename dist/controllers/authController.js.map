{"version":3,"sources":["../../controllers/authController.js"],"names":["login","req","res","email","password","body","status","send","message","validator","isEmail","user","knex","select","whereRaw","length","bcrypt","compareSync","id","token","jwt","sign","process","env","SECRET_TOKEN","expiresIn","register","name","confirmPassword","files","Object","keys","image","upload","hashSync","insert","returning","admin","raw","replace","migrate","latest","database","data","err","console","log","code"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC9B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;AAEA,MAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB,OAAOF,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AAEzB,MAAI,CAACC,SAAS,CAACC,OAAV,CAAkBP,KAAlB,CAAL,EAA+B,OAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AAE/B,MAAIG,IAAI,GAAG,MAAMC,IAAI,CAAC,OAAD,CAAJ,CAAcC,MAAd,CAAqB,OAArB,EAA8B,IAA9B,EAAoC,UAApC,EAAgD,OAAhD,EAAyDC,QAAzD,CAAkE,WAAlE,EAA+EX,KAA/E,CAAjB;AACA,MAAI,CAACQ,IAAI,CAACI,MAAV,EAAkB,OAAOb,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;;AAClB,MAAIQ,MAAM,CAACC,WAAP,CAAmBhB,GAAG,CAACI,IAAJ,CAASD,QAA5B,EAAsCO,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAA9C,CAAJ,EAA6D;AACzD,WAAOO,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAf;AACAF,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEW,MAAAA,EAAE,EAAEP,IAAI,CAAC,CAAD,CAAJ,CAAQO,EAAd;AAAkBf,MAAAA,KAAK,EAAEA,KAAzB;AAAgCgB,MAAAA,KAAK,EAAEC,GAAG,CAACC,IAAJ,CAAS;AAAEV,QAAAA,IAAI,EAAEA,IAAI,CAAC,CAAD,CAAJ,CAAQR;AAAhB,OAAT,EAAkCmB,OAAO,CAACC,GAAR,CAAYC,YAA9C,EAA4D;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAA5D;AAAvC,KAArB;AACH,GAHD,MAGOvB,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AAEV,CAdD;;AAgBA,MAAMkB,QAAQ,GAAG,OAAOzB,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEyB,IAAAA,IAAF;AAAQxB,IAAAA,KAAR;AAAeC,IAAAA,QAAf;AAAyBwB,IAAAA;AAAzB,MAA6C3B,GAAG,CAACI,IAAvD;AAEA,MAAI,CAACsB,IAAD,IAAS,CAACxB,KAAV,IAAmB,CAACC,QAApB,IAAgC,CAACwB,eAArC,EAAsD,OAAO1B,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AAEtD,MAAI,CAACC,SAAS,CAACC,OAAV,CAAkBP,KAAlB,CAAL,EAA+B,OAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AAC/B,MAAIJ,QAAQ,IAAIwB,eAAhB,EAAiC,OAAO1B,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AACjC,SAAOP,GAAG,CAACI,IAAJ,CAASuB,eAAhB;AAEA,MAAIxB,QAAQ,CAACW,MAAT,IAAmB,CAAvB,EAA0B,OAAOb,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB,CAAP;AAE1B,MAAIP,GAAG,CAAC4B,KAAJ,IAAaC,MAAM,CAACC,IAAP,CAAY9B,GAAG,CAAC4B,KAAhB,EAAuBd,MAAvB,IAAiC,CAAlD,EAAqDd,GAAG,CAACI,IAAJ,CAAS2B,KAAT,GAAiB,MAAMC,MAAM,CAAChC,GAAD,EAAMC,GAAN,EAAW,SAAX,EAAsB,CAAC,YAAD,EAAe,aAAf,EAA8B,WAA9B,CAAtB,CAA7B;AACrDD,EAAAA,GAAG,CAACI,IAAJ,CAASD,QAAT,GAAoBY,MAAM,CAACkB,QAAP,CAAgB9B,QAAhB,EAA0B,EAA1B,CAApB;;AAEA,MAAI;AACA,QAAIO,IAAI,GAAG,MAAMC,IAAI,CAAC,OAAD,CAAJ,CAAcuB,MAAd,CAAqBlC,GAAG,CAACI,IAAzB,EAA+B+B,SAA/B,CAAyC,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,SAA1C,EAAqD,SAArD,CAAzC,CAAjB;;AACA,QAAIzB,IAAI,CAAC,CAAD,CAAJ,CAAQ0B,KAAR,IAAiB,IAArB,EAA2B;AACvB,YAAMzB,IAAI,CAAC0B,GAAL,CAAU,oBAAmB3B,IAAI,CAAC,CAAD,CAAJ,CAAQO,EAAR,CAAWqB,OAAX,CAAmB,IAAnB,EAAyB,GAAzB,CAA8B,GAA3D,CAAN;AACA,YAAM3B,IAAI,CAAC4B,OAAL,CAAaC,MAAb,CAAoB,CAAC;AAAEC,QAAAA,QAAQ,EAAG,IAAG/B,IAAI,CAAC,CAAD,CAAJ,CAAQO,EAAR,CAAWqB,OAAX,CAAmB,IAAnB,EAAyB,GAAzB,CAA8B;AAA9C,OAAD,CAApB,CAAN;AACH;;AACDrC,IAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEC,MAAAA,OAAO,EAAE,iCAAX;AAA8CmC,MAAAA,IAAI,EAAEhC;AAApD,KAAT;AACH,GAPD,CAOE,OAAOiC,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,QAAIA,GAAG,CAACG,IAAJ,IAAY,OAAhB,EAAyB,OAAO7C,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAG,aAAYP,GAAG,CAACI,IAAJ,CAASF,KAAM;AAAvC,KAArB,CAAP;AACzBD,IAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAEoC;AAAX,KAArB;AACH;AACJ,CA1BD;;QA4BS5C,K,GAAAA,K;QAAO0B,Q,GAAAA,Q","sourcesContent":["const login = async (req, res) => {\r\n    const { email, password } = req.body\r\n\r\n    if (!email || !password) return res.status(400).send({ message: 'Passe os dados e não me fo!@#!' })\r\n\r\n    if (!validator.isEmail(email)) return res.status(400).send({ message: 'E-mail inválido' })\r\n\r\n    let user = await knex('users').select('email', 'id', 'password', 'admin').whereRaw('email = ?', email)\r\n    if (!user.length) return res.status(404).send({ message: 'E-mail não encontrado' })\r\n    if (bcrypt.compareSync(req.body.password, user[0].password)) {\r\n        delete user[0].password\r\n        res.status(200).send({ id: user[0].id, email: email, token: jwt.sign({ user: user[0].email }, process.env.SECRET_TOKEN, { expiresIn: '1h' }) })\r\n    } else res.status(401).send({ message: 'Dados inválidos' })\r\n\r\n}\r\n\r\nconst register = async (req, res) => {\r\n    const { name, email, password, confirmPassword } = req.body\r\n\r\n    if (!name || !email || !password || !confirmPassword) return res.status(400).send({ message: 'Por favor preencha todos os campos' })\r\n\r\n    if (!validator.isEmail(email)) return res.status(400).send({ message: 'E-mail inválido' })\r\n    if (password != confirmPassword) return res.status(400).send({ message: 'Senhas não coencidem!' })\r\n    delete req.body.confirmPassword\r\n\r\n    if (password.length <= 6) return res.status(400).send({ message: 'Senha muito curta..' })\r\n\r\n    if (req.files && Object.keys(req.files).length != 0) req.body.image = await upload(req, res, 'profile', ['image/jpeg', 'image/pjpeg', 'image/png'])\r\n    req.body.password = bcrypt.hashSync(password, 10)\r\n\r\n    try {\r\n        let user = await knex('users').insert(req.body).returning(['id', 'name', 'email', 'image', 'admin', 'morador', 'sindico'])\r\n        if (user[0].admin == true) {\r\n            await knex.raw(`CREATE DATABASE \"${user[0].id.replace(/-/g, \"_\")}\"`)\r\n            await knex.migrate.latest([{ database: `\"${user[0].id.replace(/-/g, \"_\")}\"` }])\r\n        }\r\n        res.send({ message: \"Usuário cadastrado com sucesso!\", data: user })\r\n    } catch (err) {\r\n        console.log(err)\r\n        if (err.code == '23505') return res.status(400).send({ message: `O e-mail '${req.body.email}' já esta em uso !` })\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nexport { login, register }\r\n"],"file":"authController.js"}