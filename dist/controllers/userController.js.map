{"version":3,"sources":["../../controllers/userController.js"],"names":["getUser","req","res","send","knex","select","from","err","status","message","getUserByIdUser","where","id","params","createUser","name","email","password","confirmPassword","body","validator","isEmail","length","token","headers","authorization","split","jwt","decode","admin","files","Object","keys","image","bcrypt","hashSync","user","insert","returning","raw","replace","migrate","latest","database","data","console","log","code","updateUser","update","fn","now","deleteUser","delete"],"mappings":"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","sourcesContent":["import upload from '../middleware/uploadFile'\r\n\r\nconst getUser = async (req, res) => {\r\n    try {\r\n        res.send(await knex.select('id', 'name', 'email', 'admin', 'morador', 'sindico', 'image', 'created_at').from('users'))\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nconst getUserByIdUser = async (req, res) => {\r\n    try {\r\n        res.send(await knex.select('id', 'name', 'email', 'admin', 'image').from('users').where({ id: req.params.id }))\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nconst createUser = async (req, res) => {\r\n    const { name, email, password, confirmPassword } = req.body\r\n\r\n    if (!name || !email || !password || !confirmPassword) return res.status(400).send({ message: 'Por favor preencha todos os campos' })\r\n\r\n    if (!validator.isEmail(email)) return res.status(400).send({ message: 'E-mail inválido' })\r\n    if (password != confirmPassword) return res.status(400).send({ message: 'Senhas não coencidem!' })\r\n    delete req.body.confirmPassword\r\n\r\n    if (password.length <= 6) return res.status(400).send({ message: 'Senha muito curta..' })\r\n\r\n    let token = req.headers.authorization.split(\" \")[1]\r\n    if (jwt.decode(token).admin && jwt.decode(token).admin === false) return res.status(401).send({ message: \"Usuário não tem cadastro de usuário\" })\r\n\r\n    if (req.files && Object.keys(req.files).length != 0) req.body.image = await upload(req, res, 'profile', ['image/jpeg', 'image/pjpeg', 'image/png'])\r\n    req.body.password = bcrypt.hashSync(password, 10)\r\n\r\n    try {\r\n        let user = await knex('users').insert(req.body).returning(['id', 'name', 'email', 'image', 'admin', 'morador', 'sindico'])\r\n        if (user[0].admin == true) {\r\n            await knex.raw(`CREATE DATABASE \"${user[0].id.replace(/-/g, \"_\")}\"`)\r\n            await knex.migrate.latest([{ database: `\"${user[0].id.replace(/-/g, \"_\")}\"` }])\r\n        }\r\n        res.send({ message: \"Usuário cadastrado com sucesso!\", data: user })\r\n    } catch (err) {\r\n        console.log(err)\r\n        if (err.code == '23505') return res.status(400).send({ message: `O e-mail '${req.body.email}' já esta em uso !` })\r\n        res.status(500).send({ message: err })\r\n    }\r\n\r\n}\r\n\r\nconst updateUser = async (req, res) => {\r\n    const { password } = req.body\r\n\r\n    if (password) req.body.password = bcrypt.hashSync(password, 10)\r\n\r\n    try {\r\n        await knex('users').where({ id: req.params.id }).update(req.body).update('updated_at', knex.fn.now())\r\n        res.send({ message: \"Atualizado com sucesso!\" })\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nconst deleteUser = async (req, res) => {\r\n\r\n    try {\r\n        let user = await knex.select('id').from('users').where({ id: req.params.id })\r\n        if (!user.length) res.status(404).send({ message: \"Usuário não encontrado\" })\r\n        let token = req.headers.authorization.split(\" \")[1]\r\n        if (jwt.decode(token).admin && jwt.decode(token).admin === false) return res.status(401).send({ message: \"Usuário não tem permissões para exclusão\" })\r\n        await knex('users').where({ id: req.params.id }).delete()\r\n        res.send({ message: \"Excluido com sucesso!\" })\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { getUser, getUserByIdUser, createUser, updateUser, deleteUser }\r\n"],"file":"userController.js"}