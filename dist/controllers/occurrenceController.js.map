{"version":3,"sources":["../../controllers/occurrenceController.js"],"names":["getOccurrence","req","res","send","knex","join","select","orderBy","err","status","message","getByIdOccurrence","where","id","params","createOccurrence","user_id","body","occurrence","insert","returning","socket","emit","created_at","updateOccurrence","update","fn","now","deleteOccurrence","resident","from","length","token","headers","authorization","split","jwt","decode","admin","delete"],"mappings":"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","sourcesContent":["const getOccurrence = async (req, res) => {\r\n    try {\r\n        res.send(await knex('occurrences').join('users', 'occurrences.user_id', 'users.id').select('occurrences.id', 'occurrences.updated_at', 'users.name as user_name', 'occurrences.message').orderBy('occurrences.updated_at', 'desc'))\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n\r\n}\r\n\r\nconst getByIdOccurrence = async (req, res) => {\r\n    try {\r\n        res.send(await knex('occurrences').join('users', 'occurrences.user_id', 'users.id').select('users.name', 'occurrences.message').where({ id: req.params.id }))\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nconst createOccurrence = async (req, res) => {\r\n    const { user_id, message } = req.body\r\n    if (!user_id || !message) return res.status(400).send({ message: 'Por favor preencha todos os campos' })\r\n    try {\r\n        let occurrence = await knex('occurrences').insert(req.body).returning(['id', 'created_at', 'user_id'])\r\n        await socket.emit('create_occurrence', { id: occurrence[0].id, message: message, created_at: occurrence[0].created_at, user_id: occurrence[0].user_id })\r\n        res.send({ id: occurrence[0].id, user_id: occurrence[0].user_id, message: \"Ocorrencia cadastrada com sucesso!\" })\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nconst updateOccurrence = async (req, res) => {\r\n\r\n    try {\r\n        await knex('occurrences').where({ id: req.params.id }).update(req.body).update('updated_at', knex.fn.now())\r\n        res.send({ message: \"Atualizado com sucesso!\" })\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nconst deleteOccurrence = async (req, res) => {\r\n    try {\r\n        let resident = await knex.select('id').from('occurrences').where({ id: req.params.id })\r\n        if (!resident.length) return res.status(404).send({ message: \"Usuário não encontrado\" })\r\n        let token = req.headers.authorization.split(\" \")[1]\r\n        if (jwt.decode(token).admin === 0) return res.status(401).send({ message: \"Usuário não tem permissões para exclusão\" })\r\n\r\n        await knex('occurrences').where({ id: req.params.id }).delete()\r\n        res.send({ message: \"Excluido com sucesso!\" })\r\n    } catch (err) {\r\n        res.status(500).send({ message: err })\r\n    }\r\n}\r\n\r\nexport { getOccurrence, getByIdOccurrence, createOccurrence, updateOccurrence, deleteOccurrence }\r\n"],"file":"occurrenceController.js"}