{"version":3,"sources":["../../../../node_modules/graphql/execution/execute.mjs"],"names":["forEach","isCollection","GraphQLError","locatedError","inspect","invariant","isInvalid","isNullish","isPromise","isObjectLike","memoize3","promiseForObject","promiseReduce","getOperationRootType","typeFromAST","Kind","getVariableValues","getArgumentValues","getDirectiveValues","isObjectType","isAbstractType","isLeafType","isListType","isNonNullType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","GraphQLIncludeDirective","GraphQLSkipDirective","assertValidSchema","execute","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","typeResolver","arguments","length","executeImpl","schema","args","assertValidExecutionArguments","exeContext","buildExecutionContext","Array","isArray","errors","data","executeOperation","operation","buildResponse","then","resolved","responsePathAsArray","path","flattened","curr","push","key","prev","reverse","addPath","rawVariableValues","hasMultipleAssumedOperations","fragments","Object","create","i","definitions","definition","kind","OPERATION_DEFINITION","name","value","FRAGMENT_DEFINITION","concat","coercedVariableValues","variableDefinitions","apply","coerced","defaultFieldResolver","defaultTypeResolver","type","fields","collectFields","selectionSet","undefined","result","executeFieldsSerially","executeFields","error","Promise","resolve","parentType","sourceValue","keys","results","responseName","fieldNodes","fieldPath","resolveField","resolvedResult","containsPromise","runtimeType","visitedFragmentNames","selections","selection","FIELD","shouldIncludeNode","getFieldEntryKey","INLINE_FRAGMENT","doesFragmentConditionMatch","FRAGMENT_SPREAD","fragName","fragment","node","skip","if","include","typeConditionNode","typeCondition","conditionalType","isPossibleType","alias","source","fieldNode","fieldName","fieldDef","getFieldDef","resolveFn","info","buildResolveInfo","resolveFieldValueOrError","completeValueCatchingError","returnType","_contextValue","asErrorInstance","Error","completed","completeValue","handleFieldError","rawError","ofType","completeListValue","completeLeafValue","completeAbstractValue","completeObjectValue","itemType","completedResults","item","index","completedItem","all","serialize","serializedResult","resolveTypeFn","resolveType","resolvedRuntimeType","ensureValidRuntimeType","runtimeTypeOrName","getType","isTypeOf","resolvedIsTypeOf","invalidReturnTypeError","collectAndExecuteSubfields","subFieldNodes","collectSubfields","_collectSubfields","abstractType","__typename","possibleTypes","getPossibleTypes","promisedIsTypeOfResults","isTypeOfResult","isTypeOfResults","_i","property","getQueryType","getFields"],"mappings":"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","sourcesContent":["import { forEach, isCollection } from 'iterall';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport isInvalid from '../jsutils/isInvalid';\nimport isNullish from '../jsutils/isNullish';\nimport isPromise from '../jsutils/isPromise';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport memoize3 from '../jsutils/memoize3';\nimport promiseForObject from '../jsutils/promiseForObject';\nimport promiseReduce from '../jsutils/promiseReduce';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\nimport { typeFromAST } from '../utilities/typeFromAST';\nimport { Kind } from '../language/kinds';\nimport { getVariableValues, getArgumentValues, getDirectiveValues } from './values';\nimport { isObjectType, isAbstractType, isLeafType, isListType, isNonNullType } from '../type/definition';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection';\nimport { GraphQLIncludeDirective, GraphQLSkipDirective } from '../type/directives';\nimport { assertValidSchema } from '../type/validate';\nexport function execute(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? executeImpl(argsOrSchema) : executeImpl({\n    schema: argsOrSchema,\n    document: document,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    variableValues: variableValues,\n    operationName: operationName,\n    fieldResolver: fieldResolver,\n    typeResolver: typeResolver\n  });\n}\n\nfunction executeImpl(args) {\n  var schema = args.schema,\n      document = args.document,\n      rootValue = args.rootValue,\n      contextValue = args.contextValue,\n      variableValues = args.variableValues,\n      operationName = args.operationName,\n      fieldResolver = args.fieldResolver,\n      typeResolver = args.typeResolver; // If arguments are missing or incorrect, throw an error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, typeResolver); // Return early errors if execution context failed.\n\n  if (Array.isArray(exeContext)) {\n    return {\n      errors: exeContext\n    };\n  } // Return a Promise that will eventually resolve to the data described by\n  // The \"Response\" section of the GraphQL specification.\n  //\n  // If errors are encountered while executing a GraphQL field, only that\n  // field and its descendants will be omitted, and sibling fields will still\n  // be executed. An execution which encounters errors will still result in a\n  // resolved Promise.\n\n\n  var data = executeOperation(exeContext, exeContext.operation, rootValue);\n  return buildResponse(exeContext, data);\n}\n/**\n * Given a completed execution context and data, build the { errors, data }\n * response defined by the \"Response\" section of the GraphQL specification.\n */\n\n\nfunction buildResponse(exeContext, data) {\n  if (isPromise(data)) {\n    return data.then(function (resolved) {\n      return buildResponse(exeContext, resolved);\n    });\n  }\n\n  return exeContext.errors.length === 0 ? {\n    data: data\n  } : {\n    errors: exeContext.errors,\n    data: data\n  };\n}\n/**\n * Given a ResponsePath (found in the `path` entry in the information provided\n * as the last argument to a field resolver), return an Array of the path keys.\n */\n\n\nexport function responsePathAsArray(path) {\n  var flattened = [];\n  var curr = path;\n\n  while (curr) {\n    flattened.push(curr.key);\n    curr = curr.prev;\n  }\n\n  return flattened.reverse();\n}\n/**\n * Given a ResponsePath and a key, return a new ResponsePath containing the\n * new key.\n */\n\nexport function addPath(prev, key) {\n  return {\n    prev: prev,\n    key: key\n  };\n}\n/**\n * Essential assertions before executing to provide developer feedback for\n * improper use of the GraphQL library.\n */\n\nexport function assertValidExecutionArguments(schema, document, rawVariableValues) {\n  !document ? invariant(0, 'Must provide document') : void 0; // If the schema used for execution is invalid, throw an error.\n\n  assertValidSchema(schema); // Variables, if provided, must be an object.\n\n  !(rawVariableValues == null || isObjectLike(rawVariableValues)) ? invariant(0, 'Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.') : void 0;\n}\n/**\n * Constructs a ExecutionContext object from the arguments passed to\n * execute, which we will pass throughout the other execution methods.\n *\n * Throws a GraphQLError if a valid execution context cannot be created.\n */\n\nexport function buildExecutionContext(schema, document, rootValue, contextValue, rawVariableValues, operationName, fieldResolver, typeResolver) {\n  var errors = [];\n  var operation;\n  var hasMultipleAssumedOperations = false;\n  var fragments = Object.create(null);\n\n  for (var i = 0; i < document.definitions.length; i++) {\n    var definition = document.definitions[i];\n\n    switch (definition.kind) {\n      case Kind.OPERATION_DEFINITION:\n        if (!operationName && operation) {\n          hasMultipleAssumedOperations = true;\n        } else if (!operationName || definition.name && definition.name.value === operationName) {\n          operation = definition;\n        }\n\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        fragments[definition.name.value] = definition;\n        break;\n    }\n  }\n\n  if (!operation) {\n    if (operationName) {\n      errors.push(new GraphQLError(\"Unknown operation named \\\"\".concat(operationName, \"\\\".\")));\n    } else {\n      errors.push(new GraphQLError('Must provide an operation.'));\n    }\n  } else if (hasMultipleAssumedOperations) {\n    errors.push(new GraphQLError('Must provide operation name if query contains multiple operations.'));\n  }\n\n  var variableValues;\n\n  if (operation) {\n    var coercedVariableValues = getVariableValues(schema, operation.variableDefinitions || [], rawVariableValues || {});\n\n    if (coercedVariableValues.errors) {\n      errors.push.apply(errors, coercedVariableValues.errors);\n    } else {\n      variableValues = coercedVariableValues.coerced;\n    }\n  }\n\n  if (errors.length !== 0) {\n    return errors;\n  }\n\n  !operation ? invariant(0, 'Has operation if no errors.') : void 0;\n  !variableValues ? invariant(0, 'Has variables if no errors.') : void 0;\n  return {\n    schema: schema,\n    fragments: fragments,\n    rootValue: rootValue,\n    contextValue: contextValue,\n    operation: operation,\n    variableValues: variableValues,\n    fieldResolver: fieldResolver || defaultFieldResolver,\n    typeResolver: typeResolver || defaultTypeResolver,\n    errors: errors\n  };\n}\n/**\n * Implements the \"Evaluating operations\" section of the spec.\n */\n\nfunction executeOperation(exeContext, operation, rootValue) {\n  var type = getOperationRootType(exeContext.schema, operation);\n  var fields = collectFields(exeContext, type, operation.selectionSet, Object.create(null), Object.create(null));\n  var path = undefined; // Errors from sub-fields of a NonNull type may propagate to the top level,\n  // at which point we still log the error and null the parent field, which\n  // in this case is the entire response.\n  //\n  // Similar to completeValueCatchingError.\n\n  try {\n    var result = operation.operation === 'mutation' ? executeFieldsSerially(exeContext, type, rootValue, path, fields) : executeFields(exeContext, type, rootValue, path, fields);\n\n    if (isPromise(result)) {\n      return result.then(undefined, function (error) {\n        exeContext.errors.push(error);\n        return Promise.resolve(null);\n      });\n    }\n\n    return result;\n  } catch (error) {\n    exeContext.errors.push(error);\n    return null;\n  }\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"write\" mode.\n */\n\n\nfunction executeFieldsSerially(exeContext, parentType, sourceValue, path, fields) {\n  return promiseReduce(Object.keys(fields), function (results, responseName) {\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result === undefined) {\n      return results;\n    }\n\n    if (isPromise(result)) {\n      return result.then(function (resolvedResult) {\n        results[responseName] = resolvedResult;\n        return results;\n      });\n    }\n\n    results[responseName] = result;\n    return results;\n  }, Object.create(null));\n}\n/**\n * Implements the \"Evaluating selection sets\" section of the spec\n * for \"read\" mode.\n */\n\n\nfunction executeFields(exeContext, parentType, sourceValue, path, fields) {\n  var results = Object.create(null);\n  var containsPromise = false;\n\n  for (var i = 0, keys = Object.keys(fields); i < keys.length; ++i) {\n    var responseName = keys[i];\n    var fieldNodes = fields[responseName];\n    var fieldPath = addPath(path, responseName);\n    var result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);\n\n    if (result !== undefined) {\n      results[responseName] = result;\n\n      if (!containsPromise && isPromise(result)) {\n        containsPromise = true;\n      }\n    }\n  } // If there are no promises, we can just return the object\n\n\n  if (!containsPromise) {\n    return results;\n  } // Otherwise, results is a map from field name to the result of resolving that\n  // field, which is possibly a promise. Return a promise that will return this\n  // same map, but with any promises replaced with the values they resolved to.\n\n\n  return promiseForObject(results);\n}\n/**\n * Given a selectionSet, adds all of the fields in that selection to\n * the passed in map of fields, and returns it at the end.\n *\n * CollectFields requires the \"runtime type\" of an object. For a field which\n * returns an Interface or Union type, the \"runtime type\" will be the actual\n * Object type returned by that field.\n */\n\n\nexport function collectFields(exeContext, runtimeType, selectionSet, fields, visitedFragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          if (!shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          var name = getFieldEntryKey(selection);\n\n          if (!fields[name]) {\n            fields[name] = [];\n          }\n\n          fields[name].push(selection);\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          if (!shouldIncludeNode(exeContext, selection) || !doesFragmentConditionMatch(exeContext, selection, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, selection.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        {\n          var fragName = selection.name.value;\n\n          if (visitedFragmentNames[fragName] || !shouldIncludeNode(exeContext, selection)) {\n            continue;\n          }\n\n          visitedFragmentNames[fragName] = true;\n          var fragment = exeContext.fragments[fragName];\n\n          if (!fragment || !doesFragmentConditionMatch(exeContext, fragment, runtimeType)) {\n            continue;\n          }\n\n          collectFields(exeContext, runtimeType, fragment.selectionSet, fields, visitedFragmentNames);\n          break;\n        }\n    }\n  }\n\n  return fields;\n}\n/**\n * Determines if a field should be included based on the @include and @skip\n * directives, where @skip has higher precedence than @include.\n */\n\nfunction shouldIncludeNode(exeContext, node) {\n  var skip = getDirectiveValues(GraphQLSkipDirective, node, exeContext.variableValues);\n\n  if (skip && skip.if === true) {\n    return false;\n  }\n\n  var include = getDirectiveValues(GraphQLIncludeDirective, node, exeContext.variableValues);\n\n  if (include && include.if === false) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Determines if a fragment is applicable to the given type.\n */\n\n\nfunction doesFragmentConditionMatch(exeContext, fragment, type) {\n  var typeConditionNode = fragment.typeCondition;\n\n  if (!typeConditionNode) {\n    return true;\n  }\n\n  var conditionalType = typeFromAST(exeContext.schema, typeConditionNode);\n\n  if (conditionalType === type) {\n    return true;\n  }\n\n  if (isAbstractType(conditionalType)) {\n    return exeContext.schema.isPossibleType(conditionalType, type);\n  }\n\n  return false;\n}\n/**\n * Implements the logic to compute the key of a given field's entry\n */\n\n\nfunction getFieldEntryKey(node) {\n  return node.alias ? node.alias.value : node.name.value;\n}\n/**\n * Resolves the field on the given source object. In particular, this\n * figures out the value that the field returns by calling its resolve function,\n * then calls completeValue to complete promises, serialize scalars, or execute\n * the sub-selection-set for objects.\n */\n\n\nfunction resolveField(exeContext, parentType, source, fieldNodes, path) {\n  var fieldNode = fieldNodes[0];\n  var fieldName = fieldNode.name.value;\n  var fieldDef = getFieldDef(exeContext.schema, parentType, fieldName);\n\n  if (!fieldDef) {\n    return;\n  }\n\n  var resolveFn = fieldDef.resolve || exeContext.fieldResolver;\n  var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal\n  // or abrupt (error).\n\n  var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info);\n  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);\n}\n\nexport function buildResolveInfo(exeContext, fieldDef, fieldNodes, parentType, path) {\n  // The resolve function's optional fourth argument is a collection of\n  // information about the current execution state.\n  return {\n    fieldName: fieldDef.name,\n    fieldNodes: fieldNodes,\n    returnType: fieldDef.type,\n    parentType: parentType,\n    path: path,\n    schema: exeContext.schema,\n    fragments: exeContext.fragments,\n    rootValue: exeContext.rootValue,\n    operation: exeContext.operation,\n    variableValues: exeContext.variableValues\n  };\n} // Isolates the \"ReturnOrAbrupt\" behavior to not de-opt the `resolveField`\n// function. Returns the result of resolveFn or the abrupt-return Error object.\n\nexport function resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, source, info) {\n  try {\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    // TODO: find a way to memoize, in case this field is within a List type.\n    var args = getArgumentValues(fieldDef, fieldNodes[0], exeContext.variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    var _contextValue = exeContext.contextValue;\n    var result = resolveFn(source, args, _contextValue, info);\n    return isPromise(result) ? result.then(undefined, asErrorInstance) : result;\n  } catch (error) {\n    return asErrorInstance(error);\n  }\n} // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a\n// consistent Error interface.\n\nfunction asErrorInstance(error) {\n  if (error instanceof Error) {\n    return error;\n  }\n\n  return new Error('Unexpected error value: ' + inspect(error));\n} // This is a small wrapper around completeValue which detects and logs errors\n// in the execution context.\n\n\nfunction completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {\n  try {\n    var completed;\n\n    if (isPromise(result)) {\n      completed = result.then(function (resolved) {\n        return completeValue(exeContext, returnType, fieldNodes, info, path, resolved);\n      });\n    } else {\n      completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);\n    }\n\n    if (isPromise(completed)) {\n      // Note: we don't rely on a `catch` method, but we do expect \"thenable\"\n      // to take a second callback for the error case.\n      return completed.then(undefined, function (error) {\n        return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n      });\n    }\n\n    return completed;\n  } catch (error) {\n    return handleFieldError(error, fieldNodes, path, returnType, exeContext);\n  }\n}\n\nfunction handleFieldError(rawError, fieldNodes, path, returnType, exeContext) {\n  var error = locatedError(asErrorInstance(rawError), fieldNodes, responsePathAsArray(path)); // If the field type is non-nullable, then it is resolved without any\n  // protection from errors, however it still properly locates the error.\n\n  if (isNonNullType(returnType)) {\n    throw error;\n  } // Otherwise, error protection is applied, logging the error and resolving\n  // a null value for this field if one is encountered.\n\n\n  exeContext.errors.push(error);\n  return null;\n}\n/**\n * Implements the instructions for completeValue as defined in the\n * \"Field entries\" section of the spec.\n *\n * If the field type is Non-Null, then this recursively completes the value\n * for the inner type. It throws a field error if that completion returns null,\n * as per the \"Nullability\" section of the spec.\n *\n * If the field type is a List, then this recursively completes the value\n * for the inner type on each item in the list.\n *\n * If the field type is a Scalar or Enum, ensures the completed value is a legal\n * value of the type by calling the `serialize` method of GraphQL type\n * definition.\n *\n * If the field is an abstract type, determine the runtime type of the value\n * and then complete based on that type\n *\n * Otherwise, the field type expects a sub-selection set, and will complete the\n * value by evaluating all sub-selections.\n */\n\n\nfunction completeValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If result is an Error, throw a located error.\n  if (result instanceof Error) {\n    throw result;\n  } // If field type is NonNull, complete for inner type, and throw field error\n  // if result is null.\n\n\n  if (isNonNullType(returnType)) {\n    var completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);\n\n    if (completed === null) {\n      throw new Error(\"Cannot return null for non-nullable field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\"));\n    }\n\n    return completed;\n  } // If result value is null-ish (null, undefined, or NaN) then return null.\n\n\n  if (isNullish(result)) {\n    return null;\n  } // If field type is List, complete each item in the list with the inner type\n\n\n  if (isListType(returnType)) {\n    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,\n  // returning null if serialization is not possible.\n\n\n  if (isLeafType(returnType)) {\n    return completeLeafValue(returnType, result);\n  } // If field type is an abstract type, Interface or Union, determine the\n  // runtime Object type and complete for that type.\n\n\n  if (isAbstractType(returnType)) {\n    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // If field type is Object, execute and complete all sub-selections.\n\n\n  if (isObjectType(returnType)) {\n    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);\n  } // Not reachable. All possible output types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Cannot complete value of unexpected output type: \\\"\".concat(inspect(returnType), \"\\\".\"));\n}\n/**\n * Complete a list value by completing each item in the list with the\n * inner type\n */\n\n\nfunction completeListValue(exeContext, returnType, fieldNodes, info, path, result) {\n  !isCollection(result) ? invariant(0, \"Expected Iterable, but did not find one for field \".concat(info.parentType.name, \".\").concat(info.fieldName, \".\")) : void 0; // This is specified as a simple map, however we're optimizing the path\n  // where the list contains no Promises by avoiding creating another Promise.\n\n  var itemType = returnType.ofType;\n  var containsPromise = false;\n  var completedResults = [];\n  forEach(result, function (item, index) {\n    // No need to modify the info object containing the path,\n    // since from here on it is not ever accessed by resolver functions.\n    var fieldPath = addPath(path, index);\n    var completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);\n\n    if (!containsPromise && isPromise(completedItem)) {\n      containsPromise = true;\n    }\n\n    completedResults.push(completedItem);\n  });\n  return containsPromise ? Promise.all(completedResults) : completedResults;\n}\n/**\n * Complete a Scalar or Enum by serializing to a valid value, returning\n * null if serialization is not possible.\n */\n\n\nfunction completeLeafValue(returnType, result) {\n  !returnType.serialize ? invariant(0, 'Missing serialize method on type') : void 0;\n  var serializedResult = returnType.serialize(result);\n\n  if (isInvalid(serializedResult)) {\n    throw new Error(\"Expected a value of type \\\"\".concat(inspect(returnType), \"\\\" but \") + \"received: \".concat(inspect(result)));\n  }\n\n  return serializedResult;\n}\n/**\n * Complete a value of an abstract type by determining the runtime object type\n * of that value, then complete the value for that type.\n */\n\n\nfunction completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {\n  var resolveTypeFn = returnType.resolveType || exeContext.typeResolver;\n  var contextValue = exeContext.contextValue;\n  var runtimeType = resolveTypeFn(result, contextValue, info, returnType);\n\n  if (isPromise(runtimeType)) {\n    return runtimeType.then(function (resolvedRuntimeType) {\n      return completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n    });\n  }\n\n  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);\n}\n\nfunction ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {\n  var runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;\n\n  if (!isObjectType(runtimeType)) {\n    throw new GraphQLError(\"Abstract type \".concat(returnType.name, \" must resolve to an Object type at runtime for field \").concat(info.parentType.name, \".\").concat(info.fieldName, \" with \") + \"value \".concat(inspect(result), \", received \\\"\").concat(inspect(runtimeType), \"\\\". \") + \"Either the \".concat(returnType.name, \" type should provide a \\\"resolveType\\\" function or each possible type should provide an \\\"isTypeOf\\\" function.\"), fieldNodes);\n  }\n\n  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {\n    throw new GraphQLError(\"Runtime Object type \\\"\".concat(runtimeType.name, \"\\\" is not a possible type for \\\"\").concat(returnType.name, \"\\\".\"), fieldNodes);\n  }\n\n  return runtimeType;\n}\n/**\n * Complete an Object value by executing all sub-selections.\n */\n\n\nfunction completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {\n  // If there is an isTypeOf predicate function, call it with the\n  // current result. If isTypeOf returns false, then raise an error rather\n  // than continuing execution.\n  if (returnType.isTypeOf) {\n    var isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);\n\n    if (isPromise(isTypeOf)) {\n      return isTypeOf.then(function (resolvedIsTypeOf) {\n        if (!resolvedIsTypeOf) {\n          throw invalidReturnTypeError(returnType, result, fieldNodes);\n        }\n\n        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n      });\n    }\n\n    if (!isTypeOf) {\n      throw invalidReturnTypeError(returnType, result, fieldNodes);\n    }\n  }\n\n  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result);\n}\n\nfunction invalidReturnTypeError(returnType, result, fieldNodes) {\n  return new GraphQLError(\"Expected value of type \\\"\".concat(returnType.name, \"\\\" but got: \").concat(inspect(result), \".\"), fieldNodes);\n}\n\nfunction collectAndExecuteSubfields(exeContext, returnType, fieldNodes, path, result) {\n  // Collect sub-fields to execute to complete this value.\n  var subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);\n  return executeFields(exeContext, returnType, result, path, subFieldNodes);\n}\n/**\n * A memoized collection of relevant subfields with regard to the return\n * type. Memoizing ensures the subfields are not repeatedly calculated, which\n * saves overhead when resolving lists of values.\n */\n\n\nvar collectSubfields = memoize3(_collectSubfields);\n\nfunction _collectSubfields(exeContext, returnType, fieldNodes) {\n  var subFieldNodes = Object.create(null);\n  var visitedFragmentNames = Object.create(null);\n\n  for (var i = 0; i < fieldNodes.length; i++) {\n    var selectionSet = fieldNodes[i].selectionSet;\n\n    if (selectionSet) {\n      subFieldNodes = collectFields(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);\n    }\n  }\n\n  return subFieldNodes;\n}\n/**\n * If a resolveType function is not given, then a default resolve behavior is\n * used which attempts two strategies:\n *\n * First, See if the provided value has a `__typename` field defined, if so, use\n * that value as name of the resolved type.\n *\n * Otherwise, test each possible type for the abstract type by calling\n * isTypeOf for the object being coerced, returning the first type that matches.\n */\n\n\nexport var defaultTypeResolver = function defaultTypeResolver(value, contextValue, info, abstractType) {\n  // First, look for `__typename`.\n  if (isObjectLike(value) && typeof value.__typename === 'string') {\n    return value.__typename;\n  } // Otherwise, test each possible type.\n\n\n  var possibleTypes = info.schema.getPossibleTypes(abstractType);\n  var promisedIsTypeOfResults = [];\n\n  for (var i = 0; i < possibleTypes.length; i++) {\n    var type = possibleTypes[i];\n\n    if (type.isTypeOf) {\n      var isTypeOfResult = type.isTypeOf(value, contextValue, info);\n\n      if (isPromise(isTypeOfResult)) {\n        promisedIsTypeOfResults[i] = isTypeOfResult;\n      } else if (isTypeOfResult) {\n        return type;\n      }\n    }\n  }\n\n  if (promisedIsTypeOfResults.length) {\n    return Promise.all(promisedIsTypeOfResults).then(function (isTypeOfResults) {\n      for (var _i = 0; _i < isTypeOfResults.length; _i++) {\n        if (isTypeOfResults[_i]) {\n          return possibleTypes[_i];\n        }\n      }\n    });\n  }\n};\n/**\n * If a resolve function is not given, then a default resolve behavior is used\n * which takes the property of the source object of the same name as the field\n * and returns it as the result, or if it's a function, returns the result\n * of calling that function while passing along args and context value.\n */\n\nexport var defaultFieldResolver = function defaultFieldResolver(source, args, contextValue, info) {\n  // ensure source is a value for which property access is acceptable.\n  if (isObjectLike(source) || typeof source === 'function') {\n    var property = source[info.fieldName];\n\n    if (typeof property === 'function') {\n      return source[info.fieldName](args, contextValue, info);\n    }\n\n    return property;\n  }\n};\n/**\n * This method looks up the field on the given type definition.\n * It has special casing for the two introspection fields, __schema\n * and __typename. __typename is special because it can always be\n * queried as a field, even in situations where no other fields\n * are allowed, like on a Union. __schema could get automatically\n * added to the query type, but that would require mutating type\n * definitions, which would cause issues.\n */\n\nexport function getFieldDef(schema, parentType, fieldName) {\n  if (fieldName === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  } else if (fieldName === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  } else if (fieldName === TypeNameMetaFieldDef.name) {\n    return TypeNameMetaFieldDef;\n  }\n\n  return parentType.getFields()[fieldName];\n}\n"],"file":"execute.js"}