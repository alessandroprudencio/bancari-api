{"version":3,"sources":["../../../../node_modules/graphql/jsutils/suggestionList.mjs"],"names":["suggestionList","input","options","optionsByDistance","Object","create","inputThreshold","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","option","value","distance","lexicalDistance","threshold","Math","max","err","return","keys","sort","a","b","aStr","bStr","i","j","d","toLowerCase","aLength","bLength","cost","min"],"mappings":"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","sourcesContent":["/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var inputThreshold = input.length / 2;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = options[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var option = _step.value;\n      var distance = lexicalDistance(input, option);\n      var threshold = Math.max(inputThreshold, option.length / 2, 1);\n\n      if (distance <= threshold) {\n        optionsByDistance[option] = distance;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i;\n  var j;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}\n"],"file":"suggestionList.js"}