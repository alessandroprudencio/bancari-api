{"version":3,"sources":["../../../../node_modules/graphql/jsutils/mapValue.mjs"],"names":["objectEntries","mapValue","map","fn","result","Object","create","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_ref2","value","_key","_value","err","return"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,4BAA1B;AACA;;;;;AAKA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,EAAvB,EAA2B;AACxC,MAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAb;AACA,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGX,aAAa,CAACE,GAAD,CAAb,CAAmBU,MAAM,CAACC,QAA1B,GAAhB,EAAuDC,KAA5D,EAAmE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAAnE,EAAmIT,yBAAyB,GAAG,IAA/J,EAAqK;AACnK,UAAIU,KAAK,GAAGH,KAAK,CAACI,KAAlB;AACA,UAAIC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAhB;AACA,UAAIG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACAb,MAAAA,MAAM,CAACe,IAAD,CAAN,GAAehB,EAAE,CAACiB,MAAD,EAASD,IAAT,CAAjB;AACD;AACF,GAPD,CAOE,OAAOE,GAAP,EAAY;AACZb,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGY,GAAjB;AACD,GAVD,SAUU;AACR,QAAI;AACF,UAAI,CAACd,yBAAD,IAA8BI,SAAS,CAACW,MAAV,IAAoB,IAAtD,EAA4D;AAC1DX,QAAAA,SAAS,CAACW,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAId,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAOL,MAAP;AACD","sourcesContent":["import objectEntries from '../polyfills/objectEntries';\n/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\n\nexport default function mapValue(map, fn) {\n  var result = Object.create(null);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = objectEntries(map)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref2 = _step.value;\n      var _key = _ref2[0];\n      var _value = _ref2[1];\n      result[_key] = fn(_value, _key);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n}\n"],"file":"mapValue.js"}