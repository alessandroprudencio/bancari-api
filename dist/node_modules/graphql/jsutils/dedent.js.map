{"version":3,"sources":["../../../../node_modules/graphql/jsutils/dedent.mjs"],"names":["dedent","strings","str","i","length","arguments","undefined","trimmedStr","replace","indent","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","char","value","err","return","RegExp"],"mappings":"AAAA;;;;;;;;;;;;AAYA,eAAe,SAASA,MAAT,CAAgBC,OAAhB,EAAyB;AACtC,MAAIC,GAAG,GAAG,EAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvCD,IAAAA,GAAG,IAAID,OAAO,CAACE,CAAD,CAAd;;AAEA,QAAIA,CAAC,IAAIE,SAAS,CAACD,MAAV,IAAoB,CAApB,GAAwB,CAAxB,GAA4BC,SAAS,CAACD,MAAV,GAAmB,CAAnD,CAAL,EAA4D;AAC1DF,MAAAA,GAAG,IAAIC,CAAC,GAAG,CAAJ,GAAQ,CAAR,IAAaE,SAAS,CAACD,MAAV,IAAoBD,CAAC,GAAG,CAArC,GAAyCG,SAAzC,GAAqDD,SAAS,CAACF,CAAC,GAAG,CAAL,CAArE,CAD0D,CACoB;AAC/E;AACF;;AAED,MAAII,UAAU,GAAGL,GAAG,CAACM,OAAJ,CAAY,OAAZ,EAAqB,EAArB,EAAyB;AAAzB,GAChBA,OADgB,CACR,SADQ,EACG,EADH,CAAjB,CAXsC,CAYb;AACzB;;AAEA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGN,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIO,SAAS,GAAGN,UAAU,CAACO,MAAM,CAACC,QAAR,CAAV,EAAhB,EAA+CC,KAApD,EAA2D,EAAEN,yBAAyB,GAAG,CAACM,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAA3D,EAA2HR,yBAAyB,GAAG,IAAvJ,EAA6J;AAC3J,UAAIS,IAAI,GAAGH,KAAK,CAACI,KAAjB;;AAEA,UAAID,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAA7B,EAAmC;AACjC;AACD;;AAEDV,MAAAA,MAAM,IAAIU,IAAV;AACD;AACF,GAVD,CAUE,OAAOE,GAAP,EAAY;AACZV,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGS,GAAjB;AACD,GAbD,SAaU;AACR,QAAI;AACF,UAAI,CAACX,yBAAD,IAA8BG,SAAS,CAACS,MAAV,IAAoB,IAAtD,EAA4D;AAC1DT,QAAAA,SAAS,CAACS,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAIX,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAOL,UAAU,CAACC,OAAX,CAAmBe,MAAM,CAAC,MAAMd,MAAP,EAAe,IAAf,CAAzB,EAA+C,EAA/C,CAAP,CA7CsC,CA6CqB;AAC5D","sourcesContent":["/**\n * An ES6 string tag that fixes indentation. Also removes leading newlines\n * and trailing spaces and tabs, but keeps trailing newlines.\n *\n * Example usage:\n * const str = dedent`\n *   {\n *     test\n *   }\n * `;\n * str === \"{\\n  test\\n}\\n\";\n */\nexport default function dedent(strings) {\n  var str = '';\n\n  for (var i = 0; i < strings.length; ++i) {\n    str += strings[i];\n\n    if (i < (arguments.length <= 1 ? 0 : arguments.length - 1)) {\n      str += i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1]; // interpolation\n    }\n  }\n\n  var trimmedStr = str.replace(/^\\n*/m, '') //  remove leading newline\n  .replace(/[ \\t]*$/, ''); // remove trailing spaces and tabs\n  // fixes indentation by removing leading spaces and tabs from each line\n\n  var indent = '';\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = trimmedStr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var char = _step.value;\n\n      if (char !== ' ' && char !== '\\t') {\n        break;\n      }\n\n      indent += char;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return trimmedStr.replace(RegExp('^' + indent, 'mg'), ''); // remove indent\n}\n"],"file":"dedent.js"}