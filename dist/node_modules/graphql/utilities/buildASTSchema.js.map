{"version":3,"sources":["../../../../node_modules/graphql/utilities/buildASTSchema.mjs"],"names":["objectValues","inspect","invariant","keyMap","keyValMap","valueFromAST","assertValidSDL","dedentBlockStringValue","TokenKind","parse","getDirectiveValues","Kind","isTypeDefinitionNode","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","GraphQLDirective","GraphQLSkipDirective","GraphQLIncludeDirective","GraphQLDeprecatedDirective","introspectionTypes","specifiedScalarTypes","GraphQLSchema","buildASTSchema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","schemaDef","typeDefs","directiveDefs","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","definitions","Symbol","iterator","_step","next","done","def","value","SCHEMA_DEFINITION","push","DIRECTIVE_DEFINITION","err","return","astBuilder","ASTDefinitionBuilder","typeName","type","typeMap","concat","keyByNameNode","node","buildType","operationTypes","getOperationTypes","query","mutation","subscription","directives","map","buildDirective","some","directive","name","types","astNode","allowedLegacyNames","schema","opTypes","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","operationType","operation","stdTypeMap","resolveType","_options","_resolveType","_proto","prototype","getNamedType","getWrappedType","LIST_TYPE","NON_NULL_TYPE","_this","locations","_ref","description","getDescription","isRepeatable","repeatable","args","arguments","arg","buildArg","buildField","field","_this2","deprecationReason","getDeprecationReason","defaultValue","buildInputField","buildEnumValue","OBJECT_TYPE_DEFINITION","_makeTypeDef","INTERFACE_TYPE_DEFINITION","_makeInterfaceDef","ENUM_TYPE_DEFINITION","_makeEnumDef","UNION_TYPE_DEFINITION","_makeUnionDef","SCALAR_TYPE_DEFINITION","_makeScalarDef","INPUT_OBJECT_TYPE_DEFINITION","_makeInputObjectDef","Error","_this3","interfaceNodes","interfaces","fieldNodes","fields","length","ref","Object","create","_this4","_this5","valueNodes","values","_this6","typeNodes","_this7","list","valFn","_ref2","deprecated","reason","commentDescriptions","rawValue","getLeadingCommentBlock","loc","comments","token","startToken","prev","COMMENT","line","String","reverse","join","buildSchema","source"],"mappings":"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","sourcesContent":["import objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport keyMap from '../jsutils/keyMap';\nimport keyValMap from '../jsutils/keyValMap';\nimport { valueFromAST } from './valueFromAST';\nimport { assertValidSDL } from '../validation/validate';\nimport { dedentBlockStringValue } from '../language/blockString';\nimport { TokenKind } from '../language/tokenKind';\nimport { parse } from '../language/parser';\nimport { getDirectiveValues } from '../execution/values';\nimport { Kind } from '../language/kinds';\nimport { isTypeDefinitionNode } from '../language/predicates';\nimport { GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull } from '../type/definition';\nimport { GraphQLDirective, GraphQLSkipDirective, GraphQLIncludeDirective, GraphQLDeprecatedDirective } from '../type/directives';\nimport { introspectionTypes } from '../type/introspection';\nimport { specifiedScalarTypes } from '../type/scalars';\nimport { GraphQLSchema } from '../type/schema';\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function buildASTSchema(documentAST, options) {\n  !(documentAST && documentAST.kind === Kind.DOCUMENT) ? invariant(0, 'Must provide valid Document AST') : void 0;\n\n  if (!options || !(options.assumeValid || options.assumeValidSDL)) {\n    assertValidSDL(documentAST);\n  }\n\n  var schemaDef;\n  var typeDefs = [];\n  var directiveDefs = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = documentAST.definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var def = _step.value;\n\n      if (def.kind === Kind.SCHEMA_DEFINITION) {\n        schemaDef = def;\n      } else if (isTypeDefinitionNode(def)) {\n        typeDefs.push(def);\n      } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        directiveDefs.push(def);\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var astBuilder = new ASTDefinitionBuilder(options, function (typeName) {\n    var type = typeMap[typeName];\n    !type ? invariant(0, \"Type \\\"\".concat(typeName, \"\\\" not found in document.\")) : void 0;\n    return type;\n  });\n  var typeMap = keyByNameNode(typeDefs, function (node) {\n    return astBuilder.buildType(node);\n  });\n  var operationTypes = schemaDef ? getOperationTypes(schemaDef) : {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription'\n  };\n  var directives = directiveDefs.map(function (def) {\n    return astBuilder.buildDirective(def);\n  }); // If specified directives were not explicitly declared, add them.\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'skip';\n  })) {\n    directives.push(GraphQLSkipDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'include';\n  })) {\n    directives.push(GraphQLIncludeDirective);\n  }\n\n  if (!directives.some(function (directive) {\n    return directive.name === 'deprecated';\n  })) {\n    directives.push(GraphQLDeprecatedDirective);\n  }\n\n  return new GraphQLSchema({\n    // Note: While this could make early assertions to get the correctly\n    // typed values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    query: operationTypes.query ? typeMap[operationTypes.query] : null,\n    mutation: operationTypes.mutation ? typeMap[operationTypes.mutation] : null,\n    subscription: operationTypes.subscription ? typeMap[operationTypes.subscription] : null,\n    types: objectValues(typeMap),\n    directives: directives,\n    astNode: schemaDef,\n    assumeValid: options && options.assumeValid,\n    allowedLegacyNames: options && options.allowedLegacyNames\n  });\n\n  function getOperationTypes(schema) {\n    var opTypes = {};\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = schema.operationTypes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var operationType = _step2.value;\n        opTypes[operationType.operation] = operationType.type.name.value;\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return opTypes;\n  }\n}\nvar stdTypeMap = keyMap(specifiedScalarTypes.concat(introspectionTypes), function (type) {\n  return type.name;\n});\nexport var ASTDefinitionBuilder =\n/*#__PURE__*/\nfunction () {\n  function ASTDefinitionBuilder(options, resolveType) {\n    this._options = options;\n    this._resolveType = resolveType;\n  }\n\n  var _proto = ASTDefinitionBuilder.prototype;\n\n  _proto.getNamedType = function getNamedType(node) {\n    var name = node.name.value;\n    return stdTypeMap[name] || this._resolveType(name);\n  };\n\n  _proto.getWrappedType = function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(this.getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(this.getWrappedType(node.type));\n    }\n\n    return this.getNamedType(node);\n  };\n\n  _proto.buildDirective = function buildDirective(directive) {\n    var _this = this;\n\n    var locations = directive.locations.map(function (_ref) {\n      var value = _ref.value;\n      return value;\n    });\n    return new GraphQLDirective({\n      name: directive.name.value,\n      description: getDescription(directive, this._options),\n      locations: locations,\n      isRepeatable: directive.repeatable,\n      args: keyByNameNode(directive.arguments || [], function (arg) {\n        return _this.buildArg(arg);\n      }),\n      astNode: directive\n    });\n  };\n\n  _proto.buildField = function buildField(field) {\n    var _this2 = this;\n\n    return {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      type: this.getWrappedType(field.type),\n      description: getDescription(field, this._options),\n      args: keyByNameNode(field.arguments || [], function (arg) {\n        return _this2.buildArg(arg);\n      }),\n      deprecationReason: getDeprecationReason(field),\n      astNode: field\n    };\n  };\n\n  _proto.buildArg = function buildArg(value) {\n    // Note: While this could make assertions to get the correctly typed\n    // value, that would throw immediately while type system validation\n    // with validateSchema() will produce more actionable results.\n    var type = this.getWrappedType(value.type);\n    return {\n      type: type,\n      description: getDescription(value, this._options),\n      defaultValue: valueFromAST(value.defaultValue, type),\n      astNode: value\n    };\n  };\n\n  _proto.buildInputField = function buildInputField(value) {\n    // Note: While this could make assertions to get the correctly typed\n    // value, that would throw immediately while type system validation\n    // with validateSchema() will produce more actionable results.\n    var type = this.getWrappedType(value.type);\n    return {\n      type: type,\n      description: getDescription(value, this._options),\n      defaultValue: valueFromAST(value.defaultValue, type),\n      astNode: value\n    };\n  };\n\n  _proto.buildEnumValue = function buildEnumValue(value) {\n    return {\n      description: getDescription(value, this._options),\n      deprecationReason: getDeprecationReason(value),\n      astNode: value\n    };\n  };\n\n  _proto.buildType = function buildType(astNode) {\n    var name = astNode.name.value;\n\n    if (stdTypeMap[name]) {\n      return stdTypeMap[name];\n    }\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        return this._makeTypeDef(astNode);\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        return this._makeInterfaceDef(astNode);\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        return this._makeEnumDef(astNode);\n\n      case Kind.UNION_TYPE_DEFINITION:\n        return this._makeUnionDef(astNode);\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        return this._makeScalarDef(astNode);\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        return this._makeInputObjectDef(astNode);\n    } // Not reachable. All possible type definition nodes have been considered.\n\n    /* istanbul ignore next */\n\n\n    throw new Error(\"Unexpected type definition node: \\\"\".concat(inspect(astNode), \"\\\".\"));\n  };\n\n  _proto._makeTypeDef = function _makeTypeDef(astNode) {\n    var _this3 = this;\n\n    var interfaceNodes = astNode.interfaces;\n    var fieldNodes = astNode.fields; // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n\n    var interfaces = interfaceNodes && interfaceNodes.length > 0 ? function () {\n      return interfaceNodes.map(function (ref) {\n        return _this3.getNamedType(ref);\n      });\n    } : [];\n    var fields = fieldNodes && fieldNodes.length > 0 ? function () {\n      return keyByNameNode(fieldNodes, function (field) {\n        return _this3.buildField(field);\n      });\n    } : Object.create(null);\n    return new GraphQLObjectType({\n      name: astNode.name.value,\n      description: getDescription(astNode, this._options),\n      interfaces: interfaces,\n      fields: fields,\n      astNode: astNode\n    });\n  };\n\n  _proto._makeInterfaceDef = function _makeInterfaceDef(astNode) {\n    var _this4 = this;\n\n    var fieldNodes = astNode.fields;\n    var fields = fieldNodes && fieldNodes.length > 0 ? function () {\n      return keyByNameNode(fieldNodes, function (field) {\n        return _this4.buildField(field);\n      });\n    } : Object.create(null);\n    return new GraphQLInterfaceType({\n      name: astNode.name.value,\n      description: getDescription(astNode, this._options),\n      fields: fields,\n      astNode: astNode\n    });\n  };\n\n  _proto._makeEnumDef = function _makeEnumDef(astNode) {\n    var _this5 = this;\n\n    var valueNodes = astNode.values || [];\n    return new GraphQLEnumType({\n      name: astNode.name.value,\n      description: getDescription(astNode, this._options),\n      values: keyByNameNode(valueNodes, function (value) {\n        return _this5.buildEnumValue(value);\n      }),\n      astNode: astNode\n    });\n  };\n\n  _proto._makeUnionDef = function _makeUnionDef(astNode) {\n    var _this6 = this;\n\n    var typeNodes = astNode.types; // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n\n    var types = typeNodes && typeNodes.length > 0 ? function () {\n      return typeNodes.map(function (ref) {\n        return _this6.getNamedType(ref);\n      });\n    } : [];\n    return new GraphQLUnionType({\n      name: astNode.name.value,\n      description: getDescription(astNode, this._options),\n      types: types,\n      astNode: astNode\n    });\n  };\n\n  _proto._makeScalarDef = function _makeScalarDef(astNode) {\n    return new GraphQLScalarType({\n      name: astNode.name.value,\n      description: getDescription(astNode, this._options),\n      astNode: astNode\n    });\n  };\n\n  _proto._makeInputObjectDef = function _makeInputObjectDef(def) {\n    var _this7 = this;\n\n    var fields = def.fields;\n    return new GraphQLInputObjectType({\n      name: def.name.value,\n      description: getDescription(def, this._options),\n      fields: fields ? function () {\n        return keyByNameNode(fields, function (field) {\n          return _this7.buildInputField(field);\n        });\n      } : Object.create(null),\n      astNode: def\n    });\n  };\n\n  return ASTDefinitionBuilder;\n}();\n\nfunction keyByNameNode(list, valFn) {\n  return keyValMap(list, function (_ref2) {\n    var name = _ref2.name;\n    return name.value;\n  }, valFn);\n}\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated && deprecated.reason;\n}\n/**\n * Given an ast node, returns its string description.\n * @deprecated: provided to ease adoption and will be removed in v16.\n *\n * Accepts options as a second argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\n\n\nexport function getDescription(node, options) {\n  if (node.description) {\n    return node.description.value;\n  }\n\n  if (options && options.commentDescriptions) {\n    var rawValue = getLeadingCommentBlock(node);\n\n    if (rawValue !== undefined) {\n      return dedentBlockStringValue('\\n' + rawValue);\n    }\n  }\n}\n\nfunction getLeadingCommentBlock(node) {\n  var loc = node.loc;\n\n  if (!loc) {\n    return;\n  }\n\n  var comments = [];\n  var token = loc.startToken.prev;\n\n  while (token && token.kind === TokenKind.COMMENT && token.next && token.prev && token.line + 1 === token.next.line && token.line !== token.prev.line) {\n    var value = String(token.value);\n    comments.push(value);\n    token = token.prev;\n  }\n\n  return comments.reverse().join('\\n');\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\n\nexport function buildSchema(source, options) {\n  return buildASTSchema(parse(source, options), options);\n}\n"],"file":"buildASTSchema.js"}