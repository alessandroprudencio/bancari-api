{"version":3,"sources":["../../../../node_modules/graphql/utilities/getOperationAST.mjs"],"names":["Kind","getOperationAST","documentAST","operationName","operation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","definitions","Symbol","iterator","_step","next","done","definition","value","kind","OPERATION_DEFINITION","name","err","return"],"mappings":"AAAA,SAASA,IAAT,QAAqB,mBAArB;AAEA;;;;;;AAKA,OAAO,SAASC,eAAT,CAAyBC,WAAzB,EAAsCC,aAAtC,EAAqD;AAC1D,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGP,WAAW,CAACQ,WAAZ,CAAwBC,MAAM,CAACC,QAA/B,GAAhB,EAA4DC,KAAjE,EAAwE,EAAER,yBAAyB,GAAG,CAACQ,KAAK,GAAGJ,SAAS,CAACK,IAAV,EAAT,EAA2BC,IAAzD,CAAxE,EAAwIV,yBAAyB,GAAG,IAApK,EAA0K;AACxK,UAAIW,UAAU,GAAGH,KAAK,CAACI,KAAvB;;AAEA,UAAID,UAAU,CAACE,IAAX,KAAoBlB,IAAI,CAACmB,oBAA7B,EAAmD;AACjD,YAAI,CAAChB,aAAL,EAAoB;AAClB;AACA;AACA;AACA,cAAIC,SAAJ,EAAe;AACb,mBAAO,IAAP;AACD;;AAEDA,UAAAA,SAAS,GAAGY,UAAZ;AACD,SATD,MASO,IAAIA,UAAU,CAACI,IAAX,IAAmBJ,UAAU,CAACI,IAAX,CAAgBH,KAAhB,KAA0Bd,aAAjD,EAAgE;AACrE,iBAAOa,UAAP;AACD;AACF;AACF;AACF,GAnBD,CAmBE,OAAOK,GAAP,EAAY;AACZf,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGc,GAAjB;AACD,GAtBD,SAsBU;AACR,QAAI;AACF,UAAI,CAAChB,yBAAD,IAA8BI,SAAS,CAACa,MAAV,IAAoB,IAAtD,EAA4D;AAC1Db,QAAAA,SAAS,CAACa,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAIhB,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;;AAED,SAAOH,SAAP;AACD","sourcesContent":["import { Kind } from '../language/kinds';\n\n/**\n * Returns an operation AST given a document AST and optionally an operation\n * name. If a name is not provided, an operation is only returned if only one is\n * provided in the document.\n */\nexport function getOperationAST(documentAST, operationName) {\n  var operation = null;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = documentAST.definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var definition = _step.value;\n\n      if (definition.kind === Kind.OPERATION_DEFINITION) {\n        if (!operationName) {\n          // If no operation name was provided, only return an Operation if there\n          // is one defined in the document. Upon encountering the second, return\n          // null.\n          if (operation) {\n            return null;\n          }\n\n          operation = definition;\n        } else if (definition.name && definition.name.value === operationName) {\n          return definition;\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return operation;\n}\n"],"file":"getOperationAST.js"}