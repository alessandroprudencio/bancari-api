{"version":3,"sources":["../../../../node_modules/graphql/utilities/extendSchema.mjs"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","flatMap","objectValues","inspect","invariant","mapValue","keyValMap","ASTDefinitionBuilder","assertValidSDLExtension","assertSchema","GraphQLSchema","isIntrospectionType","isSpecifiedScalarType","isScalarType","isObjectType","isInterfaceType","isUnionType","isListType","isNonNullType","isEnumType","isInputObjectType","GraphQLList","GraphQLNonNull","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLDirective","Kind","isTypeDefinitionNode","isTypeExtensionNode","extendSchema","schema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","typeDefs","typeExtsMap","create","directiveDefs","schemaDef","schemaExts","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","definitions","Symbol","iterator","_step","next","done","def","SCHEMA_DEFINITION","SCHEMA_EXTENSION","push","extendedTypeName","name","existingTypeExts","DIRECTIVE_DEFINITION","err","return","schemaConfig","toConfig","astBuilder","typeName","type","typeMap","node","buildType","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","types","_step2","existingType","extendNamedType","operationTypes","query","mutation","subscription","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_ref2","operation","_i","_schemaExts","schemaExt","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_ref4","_operation","_type","allowedLegacyNames","getMaybeTypeByName","directives","getMergedDirectives","astNode","extensionASTNodes","replaceType","ofType","replaceNamedType","existingDirectives","getDirectives","map","extendDirective","buildDirective","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","Error","directive","config","args","extendArg","extensions","fieldNodes","fields","field","buildInputField","valueNodes","values","buildEnumValue","interfaceNodes","interfaces","getInterfaces","getNamedType","extendField","buildField","typeNodes","getTypes","arg"],"mappings":"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","sourcesContent":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport invariant from '../jsutils/invariant';\nimport mapValue from '../jsutils/mapValue';\nimport keyValMap from '../jsutils/keyValMap';\nimport { ASTDefinitionBuilder } from './buildASTSchema';\nimport { assertValidSDLExtension } from '../validation/validate';\nimport { assertSchema, GraphQLSchema } from '../type/schema';\nimport { isIntrospectionType } from '../type/introspection';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isListType, isNonNullType, isEnumType, isInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType } from '../type/definition';\nimport { GraphQLDirective } from '../type/directives';\nimport { Kind } from '../language/kinds';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../language/predicates';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n *\n * Accepts options as a third argument:\n *\n *    - commentDescriptions:\n *        Provide true to use preceding comments as the description.\n *\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  !(documentAST && documentAST.kind === Kind.DOCUMENT) ? invariant(0, 'Must provide valid Document AST') : void 0;\n\n  if (!options || !(options.assumeValid || options.assumeValidSDL)) {\n    assertValidSDLExtension(documentAST, schema);\n  } // Collect the type definitions and extensions found in the document.\n\n\n  var typeDefs = [];\n  var typeExtsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefs = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExts = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = documentAST.definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var def = _step.value;\n\n      if (def.kind === Kind.SCHEMA_DEFINITION) {\n        schemaDef = def;\n      } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n        schemaExts.push(def);\n      } else if (isTypeDefinitionNode(def)) {\n        typeDefs.push(def);\n      } else if (isTypeExtensionNode(def)) {\n        var extendedTypeName = def.name.value;\n        var existingTypeExts = typeExtsMap[extendedTypeName];\n        typeExtsMap[extendedTypeName] = existingTypeExts ? existingTypeExts.concat([def]) : [def];\n      } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        directiveDefs.push(def);\n      }\n    } // If this document contains no new types, extensions, or directives then\n    // return the same unmodified GraphQLSchema instance.\n\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  if (Object.keys(typeExtsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExts.length === 0 && !schemaDef) {\n    return schema;\n  }\n\n  var schemaConfig = schema.toConfig();\n  var astBuilder = new ASTDefinitionBuilder(options, function (typeName) {\n    var type = typeMap[typeName];\n    !type ? invariant(0, \"Unknown type: \\\"\".concat(typeName, \"\\\".\")) : void 0;\n    return type;\n  });\n  var typeMap = keyValMap(typeDefs, function (node) {\n    return node.name.value;\n  }, function (node) {\n    return astBuilder.buildType(node);\n  });\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = schemaConfig.types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var existingType = _step2.value;\n      typeMap[existingType.name] = extendNamedType(existingType);\n    } // Get the extended root operation types.\n\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  var operationTypes = {\n    query: schemaConfig.query && schemaConfig.query.name,\n    mutation: schemaConfig.mutation && schemaConfig.mutation.name,\n    subscription: schemaConfig.subscription && schemaConfig.subscription.name\n  };\n\n  if (schemaDef) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = schemaDef.operationTypes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var _ref2 = _step3.value;\n        var operation = _ref2.operation;\n        var type = _ref2.type;\n        operationTypes[operation] = type.name.value;\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  } // Then, incorporate schema definition and all schema extensions.\n\n\n  for (var _i = 0, _schemaExts = schemaExts; _i < _schemaExts.length; _i++) {\n    var schemaExt = _schemaExts[_i];\n\n    if (schemaExt.operationTypes) {\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = schemaExt.operationTypes[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _ref4 = _step4.value;\n          var _operation = _ref4.operation;\n          var _type = _ref4.type;\n          operationTypes[_operation] = _type.name.value;\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    }\n  } // Support both original legacy names and extended legacy names.\n\n\n  var allowedLegacyNames = schemaConfig.allowedLegacyNames.concat(options && options.allowedLegacyNames || []); // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    query: getMaybeTypeByName(operationTypes.query),\n    mutation: getMaybeTypeByName(operationTypes.mutation),\n    subscription: getMaybeTypeByName(operationTypes.subscription),\n    types: objectValues(typeMap),\n    directives: getMergedDirectives(),\n    astNode: schemaDef || schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExts),\n    allowedLegacyNames: allowedLegacyNames\n  }); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(replaceType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    return typeMap[type.name];\n  }\n\n  function getMaybeTypeByName(typeName) {\n    return typeName ? typeMap[typeName] : null;\n  }\n\n  function getMergedDirectives() {\n    var existingDirectives = schema.getDirectives().map(extendDirective);\n    !existingDirectives ? invariant(0, 'schema must have default directives') : void 0;\n    return existingDirectives.concat(directiveDefs.map(function (node) {\n      return astBuilder.buildDirective(node);\n    }));\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    } else if (isScalarType(type)) {\n      return extendScalarType(type);\n    } else if (isObjectType(type)) {\n      return extendObjectType(type);\n    } else if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    } else if (isUnionType(type)) {\n      return extendUnionType(type);\n    } else if (isEnumType(type)) {\n      return extendEnumType(type);\n    } else if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    } // Not reachable. All possible types have been considered.\n\n    /* istanbul ignore next */\n\n\n    throw new Error(\"Unexpected type: \\\"\".concat(inspect(type), \"\\\".\"));\n  }\n\n  function extendDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread({}, config, {\n      args: mapValue(config.args, extendArg)\n    }));\n  }\n\n  function extendInputObjectType(type) {\n    var config = type.toConfig();\n    var extensions = typeExtsMap[config.name] || [];\n    var fieldNodes = flatMap(extensions, function (node) {\n      return node.fields || [];\n    });\n    return new GraphQLInputObjectType(_objectSpread({}, config, {\n      fields: function fields() {\n        return _objectSpread({}, mapValue(config.fields, function (field) {\n          return _objectSpread({}, field, {\n            type: replaceType(field.type)\n          });\n        }), keyValMap(fieldNodes, function (field) {\n          return field.name.value;\n        }, function (field) {\n          return astBuilder.buildInputField(field);\n        }));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendEnumType(type) {\n    var config = type.toConfig();\n    var extensions = typeExtsMap[type.name] || [];\n    var valueNodes = flatMap(extensions, function (node) {\n      return node.values || [];\n    });\n    return new GraphQLEnumType(_objectSpread({}, config, {\n      values: _objectSpread({}, config.values, keyValMap(valueNodes, function (value) {\n        return value.name.value;\n      }, function (value) {\n        return astBuilder.buildEnumValue(value);\n      })),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendScalarType(type) {\n    var config = type.toConfig();\n    var extensions = typeExtsMap[config.name] || [];\n    return new GraphQLScalarType(_objectSpread({}, config, {\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendObjectType(type) {\n    var config = type.toConfig();\n    var extensions = typeExtsMap[config.name] || [];\n    var interfaceNodes = flatMap(extensions, function (node) {\n      return node.interfaces || [];\n    });\n    var fieldNodes = flatMap(extensions, function (node) {\n      return node.fields || [];\n    });\n    return new GraphQLObjectType(_objectSpread({}, config, {\n      interfaces: function interfaces() {\n        return [].concat(type.getInterfaces().map(replaceNamedType), interfaceNodes.map(function (node) {\n          return astBuilder.getNamedType(node);\n        }));\n      },\n      fields: function fields() {\n        return _objectSpread({}, mapValue(config.fields, extendField), keyValMap(fieldNodes, function (node) {\n          return node.name.value;\n        }, function (node) {\n          return astBuilder.buildField(node);\n        }));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendInterfaceType(type) {\n    var config = type.toConfig();\n    var extensions = typeExtsMap[config.name] || [];\n    var fieldNodes = flatMap(extensions, function (node) {\n      return node.fields || [];\n    });\n    return new GraphQLInterfaceType(_objectSpread({}, config, {\n      fields: function fields() {\n        return _objectSpread({}, mapValue(config.fields, extendField), keyValMap(fieldNodes, function (node) {\n          return node.name.value;\n        }, function (node) {\n          return astBuilder.buildField(node);\n        }));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendUnionType(type) {\n    var config = type.toConfig();\n    var extensions = typeExtsMap[config.name] || [];\n    var typeNodes = flatMap(extensions, function (node) {\n      return node.types || [];\n    });\n    return new GraphQLUnionType(_objectSpread({}, config, {\n      types: function types() {\n        return [].concat(type.getTypes().map(replaceNamedType), typeNodes.map(function (node) {\n          return astBuilder.getNamedType(node);\n        }));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n\n  function extendField(field) {\n    return _objectSpread({}, field, {\n      type: replaceType(field.type),\n      args: mapValue(field.args, extendArg)\n    });\n  }\n\n  function extendArg(arg) {\n    return _objectSpread({}, arg, {\n      type: replaceType(arg.type)\n    });\n  }\n}\n"],"file":"extendSchema.js"}