{"version":3,"sources":["../../../../node_modules/graphql/utilities/valueFromAST.mjs"],"names":["objectValues","inspect","keyMap","isInvalid","Kind","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","valueFromAST","valueNode","type","variables","kind","NULL","ofType","VARIABLE","variableName","name","value","variableValue","itemType","LIST","coercedValues","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","values","Symbol","iterator","_step","next","done","itemNode","isMissingVariable","push","itemValue","err","return","coercedValue","OBJECT","coercedObj","Object","create","fieldNodes","fields","field","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getFields","_step2","fieldNode","defaultValue","fieldValue","ENUM","enumValue","getValue","result","parseLiteral","_error","Error","concat"],"mappings":"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","sourcesContent":["import objectValues from '../polyfills/objectValues';\nimport inspect from '../jsutils/inspect';\nimport keyMap from '../jsutils/keyMap';\nimport isInvalid from '../jsutils/isInvalid';\nimport { Kind } from '../language/kinds';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType } from '../type/definition';\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    var variableName = valueNode.name.value;\n\n    if (!variables || isInvalid(variables[variableName])) {\n      // No valid return value.\n      return;\n    }\n\n    var variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isListType(type)) {\n    var itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      var coercedValues = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = valueNode.values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var itemNode = _step.value;\n\n          if (isMissingVariable(itemNode, variables)) {\n            // If an array contains a missing variable, it is either coerced to\n            // null or if the item type is non-null, it considered invalid.\n            if (isNonNullType(itemType)) {\n              return; // Invalid: intentionally return no value.\n            }\n\n            coercedValues.push(null);\n          } else {\n            var itemValue = valueFromAST(itemNode, itemType, variables);\n\n            if (isInvalid(itemValue)) {\n              return; // Invalid: intentionally return no value.\n            }\n\n            coercedValues.push(itemValue);\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return coercedValues;\n    }\n\n    var coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (isInvalid(coercedValue)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var coercedObj = Object.create(null);\n    var fieldNodes = keyMap(valueNode.fields, function (field) {\n      return field.name.value;\n    });\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = objectValues(type.getFields())[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var field = _step2.value;\n        var fieldNode = fieldNodes[field.name];\n\n        if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n          if (field.defaultValue !== undefined) {\n            coercedObj[field.name] = field.defaultValue;\n          } else if (isNonNullType(field.type)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          continue;\n        }\n\n        var fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n        if (isInvalid(fieldValue)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        coercedObj[field.name] = fieldValue;\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return coercedObj;\n  }\n\n  if (isEnumType(type)) {\n    if (valueNode.kind !== Kind.ENUM) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    var enumValue = type.getValue(valueNode.value);\n\n    if (!enumValue) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return enumValue.value;\n  }\n\n  if (isScalarType(type)) {\n    // Scalars fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    var result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (isInvalid(result)) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  } // Not reachable. All possible input types have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected input type: \\\"\".concat(inspect(type), \"\\\".\"));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (!variables || isInvalid(variables[valueNode.name.value]));\n}\n"],"file":"valueFromAST.js"}