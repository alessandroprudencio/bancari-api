{"version":3,"sources":["../../../../node_modules/graphql/utilities/typeFromAST.mjs"],"names":["inspect","Kind","GraphQLList","GraphQLNonNull","typeFromAST","schema","typeNode","innerType","kind","LIST_TYPE","type","NON_NULL_TYPE","NAMED_TYPE","getType","name","value","Error","concat"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,oBAA5C;AACA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,QAA7B,EAAuC;AAC5C;AACA,MAAIC,SAAJ;;AAEA,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACQ,SAA3B,EAAsC;AACpCF,IAAAA,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;AACA,WAAOH,SAAS,IAAIL,WAAW,CAACK,SAAD,CAA/B;AACD;;AAED,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACU,aAA3B,EAA0C;AACxCJ,IAAAA,SAAS,GAAGH,WAAW,CAACC,MAAD,EAASC,QAAQ,CAACI,IAAlB,CAAvB;AACA,WAAOH,SAAS,IAAIJ,cAAc,CAACI,SAAD,CAAlC;AACD;;AAED,MAAID,QAAQ,CAACE,IAAT,KAAkBP,IAAI,CAACW,UAA3B,EAAuC;AACrC,WAAOP,MAAM,CAACQ,OAAP,CAAeP,QAAQ,CAACQ,IAAT,CAAcC,KAA7B,CAAP;AACD,GAhB2C,CAgB1C;;AAEF;;;AAGA,QAAM,IAAIC,KAAJ,CAAU,2BAA2BC,MAA3B,CAAkCjB,OAAO,CAACM,QAAD,CAAzC,EAAqD,KAArD,CAAV,CAAN;AACD","sourcesContent":["import inspect from '../jsutils/inspect';\nimport { Kind } from '../language/kinds';\nimport { GraphQLList, GraphQLNonNull } from '../type/definition';\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  var innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && GraphQLNonNull(innerType);\n  }\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // Not reachable. All possible type nodes have been considered.\n\n  /* istanbul ignore next */\n\n\n  throw new Error(\"Unexpected type node: \\\"\".concat(inspect(typeNode), \"\\\".\"));\n}\n"],"file":"typeFromAST.js"}