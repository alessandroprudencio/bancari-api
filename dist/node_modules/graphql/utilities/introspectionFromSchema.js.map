{"version":3,"sources":["../../../../node_modules/graphql/utilities/introspectionFromSchema.mjs"],"names":["invariant","isPromise","execute","parse","getIntrospectionQuery","introspectionFromSchema","schema","options","queryAST","result","errors","data"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AACA;;;;;;;;;;AAUA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;AACvD,MAAIC,QAAQ,GAAGL,KAAK,CAACC,qBAAqB,CAACG,OAAD,CAAtB,CAApB;AACA,MAAIE,MAAM,GAAGP,OAAO,CAACI,MAAD,EAASE,QAAT,CAApB;AACA,IAAE,CAACP,SAAS,CAACQ,MAAD,CAAV,IAAsB,CAACA,MAAM,CAACC,MAA9B,IAAwCD,MAAM,CAACE,IAAjD,IAAyDX,SAAS,CAAC,CAAD,CAAlE,GAAwE,KAAK,CAA7E;AACA,SAAOS,MAAM,CAACE,IAAd;AACD","sourcesContent":["import invariant from '../jsutils/invariant';\nimport isPromise from '../jsutils/isPromise';\nimport { execute } from '../execution/execute';\nimport { parse } from '../language/parser';\nimport { getIntrospectionQuery } from './introspectionQuery';\n/**\n * Build an IntrospectionQuery from a GraphQLSchema\n *\n * IntrospectionQuery is useful for utilities that care about type and field\n * relationships, but do not need to traverse through those relationships.\n *\n * This is the inverse of buildClientSchema. The primary use case is outside\n * of the server context, for instance when doing schema comparisons.\n */\n\nexport function introspectionFromSchema(schema, options) {\n  var queryAST = parse(getIntrospectionQuery(options));\n  var result = execute(schema, queryAST);\n  !(!isPromise(result) && !result.errors && result.data) ? invariant(0) : void 0;\n  return result.data;\n}\n"],"file":"introspectionFromSchema.js"}