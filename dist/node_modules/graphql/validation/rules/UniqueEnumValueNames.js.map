{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/UniqueEnumValueNames.mjs"],"names":["GraphQLError","isEnumType","duplicateEnumValueNameMessage","typeName","valueName","concat","existedEnumValueNameMessage","UniqueEnumValueNames","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","name","value","values","valueNames","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","valueDef","existingType","getValue","reportError","err","return"],"mappings":"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","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { isEnumType } from '../../type/definition';\nexport function duplicateEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\");\n}\nexport function existedEnumValueNameMessage(typeName, valueName) {\n  return \"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\n\nexport function UniqueEnumValueNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    }\n\n    if (node.values) {\n      var valueNames = knownValueNames[typeName];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = node.values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var valueDef = _step.value;\n          var valueName = valueDef.name.value;\n          var existingType = existingTypeMap[typeName];\n\n          if (isEnumType(existingType) && existingType.getValue(valueName)) {\n            context.reportError(new GraphQLError(existedEnumValueNameMessage(typeName, valueName), valueDef.name));\n          } else if (valueNames[valueName]) {\n            context.reportError(new GraphQLError(duplicateEnumValueNameMessage(typeName, valueName), [valueNames[valueName], valueDef.name]));\n          } else {\n            valueNames[valueName] = valueDef.name;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"],"file":"UniqueEnumValueNames.js"}