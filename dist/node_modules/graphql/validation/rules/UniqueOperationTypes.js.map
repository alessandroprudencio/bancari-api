{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/UniqueOperationTypes.mjs"],"names":["GraphQLError","duplicateOperationTypeMessage","operation","concat","existedOperationTypeMessage","UniqueOperationTypes","context","schema","getSchema","definedOperationTypes","Object","create","existingOperationTypes","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","SchemaDefinition","checkOperationTypes","SchemaExtension","node","operationTypes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","operationType","value","alreadyDefinedOperationType","reportError","err","return"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,6BAAT,CAAuCC,SAAvC,EAAkD;AACvD,SAAO,yBAAyBC,MAAzB,CAAgCD,SAAhC,EAA2C,kBAA3C,CAAP;AACD;AACD,OAAO,SAASE,2BAAT,CAAqCF,SAArC,EAAgD;AACrD,SAAO,YAAYC,MAAZ,CAAmBD,SAAnB,EAA8B,yDAA9B,CAAP;AACD;AACD;;;;;;AAMA,OAAO,SAASG,oBAAT,CAA8BC,OAA9B,EAAuC;AAC5C,MAAIC,MAAM,GAAGD,OAAO,CAACE,SAAR,EAAb;AACA,MAAIC,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;AACA,MAAIC,sBAAsB,GAAGL,MAAM,GAAG;AACpCM,IAAAA,KAAK,EAAEN,MAAM,CAACO,YAAP,EAD6B;AAEpCC,IAAAA,QAAQ,EAAER,MAAM,CAACS,eAAP,EAF0B;AAGpCC,IAAAA,YAAY,EAAEV,MAAM,CAACW,mBAAP;AAHsB,GAAH,GAI/B,EAJJ;AAKA,SAAO;AACLC,IAAAA,gBAAgB,EAAEC,mBADb;AAELC,IAAAA,eAAe,EAAED;AAFZ,GAAP;;AAKA,WAASA,mBAAT,CAA6BE,IAA7B,EAAmC;AACjC,QAAIA,IAAI,CAACC,cAAT,EAAyB;AACvB,UAAIC,yBAAyB,GAAG,IAAhC;AACA,UAAIC,iBAAiB,GAAG,KAAxB;AACA,UAAIC,cAAc,GAAGC,SAArB;;AAEA,UAAI;AACF,aAAK,IAAIC,SAAS,GAAG,CAACN,IAAI,CAACC,cAAL,IAAuB,EAAxB,EAA4BM,MAAM,CAACC,QAAnC,GAAhB,EAAgEC,KAArE,EAA4E,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAA5E,EAA4IT,yBAAyB,GAAG,IAAxK,EAA8K;AAC5K,cAAIU,aAAa,GAAGH,KAAK,CAACI,KAA1B;AACA,cAAIjC,SAAS,GAAGgC,aAAa,CAAChC,SAA9B;AACA,cAAIkC,2BAA2B,GAAG3B,qBAAqB,CAACP,SAAD,CAAvD;;AAEA,cAAIU,sBAAsB,CAACV,SAAD,CAA1B,EAAuC;AACrCI,YAAAA,OAAO,CAAC+B,WAAR,CAAoB,IAAIrC,YAAJ,CAAiBI,2BAA2B,CAACF,SAAD,CAA5C,EAAyDgC,aAAzD,CAApB;AACD,WAFD,MAEO,IAAIE,2BAAJ,EAAiC;AACtC9B,YAAAA,OAAO,CAAC+B,WAAR,CAAoB,IAAIrC,YAAJ,CAAiBC,6BAA6B,CAACC,SAAD,CAA9C,EAA2D,CAACkC,2BAAD,EAA8BF,aAA9B,CAA3D,CAApB;AACD,WAFM,MAEA;AACLzB,YAAAA,qBAAqB,CAACP,SAAD,CAArB,GAAmCgC,aAAnC;AACD;AACF;AACF,OAdD,CAcE,OAAOI,GAAP,EAAY;AACZb,QAAAA,iBAAiB,GAAG,IAApB;AACAC,QAAAA,cAAc,GAAGY,GAAjB;AACD,OAjBD,SAiBU;AACR,YAAI;AACF,cAAI,CAACd,yBAAD,IAA8BI,SAAS,CAACW,MAAV,IAAoB,IAAtD,EAA4D;AAC1DX,YAAAA,SAAS,CAACW,MAAV;AACD;AACF,SAJD,SAIU;AACR,cAAId,iBAAJ,EAAuB;AACrB,kBAAMC,cAAN;AACD;AACF;AACF;AACF;;AAED,WAAO,KAAP;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateOperationTypeMessage(operation) {\n  return \"There can be only one \".concat(operation, \" type in schema.\");\n}\nexport function existedOperationTypeMessage(operation) {\n  return \"Type for \".concat(operation, \" already defined in the schema. It cannot be redefined.\");\n}\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\n\nexport function UniqueOperationTypes(context) {\n  var schema = context.getSchema();\n  var definedOperationTypes = Object.create(null);\n  var existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    if (node.operationTypes) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = (node.operationTypes || [])[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var operationType = _step.value;\n          var operation = operationType.operation;\n          var alreadyDefinedOperationType = definedOperationTypes[operation];\n\n          if (existingOperationTypes[operation]) {\n            context.reportError(new GraphQLError(existedOperationTypeMessage(operation), operationType));\n          } else if (alreadyDefinedOperationType) {\n            context.reportError(new GraphQLError(duplicateOperationTypeMessage(operation), [alreadyDefinedOperationType, operationType]));\n          } else {\n            definedOperationTypes[operation] = operationType;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n"],"file":"UniqueOperationTypes.js"}