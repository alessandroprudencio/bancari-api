{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/NoFragmentCycles.mjs"],"names":["GraphQLError","cycleErrorMessage","fragName","spreadNames","via","length","join","concat","NoFragmentCycles","context","visitedFrags","Object","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","detectCycleRecursive","fragment","name","value","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","spreadNode","spreadName","cycleIndex","push","spreadFragment","getFragment","cyclePath","slice","fragmentNames","map","s","reportError","pop","err","return"],"mappings":"AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqCC,WAArC,EAAkD;AACvD,MAAIC,GAAG,GAAGD,WAAW,CAACE,MAAZ,GAAqB,UAAUF,WAAW,CAACG,IAAZ,CAAiB,IAAjB,CAA/B,GAAwD,EAAlE;AACA,SAAO,4BAA4BC,MAA5B,CAAmCL,QAAnC,EAA6C,kBAA7C,EAAiEK,MAAjE,CAAwEH,GAAxE,EAA6E,GAA7E,CAAP;AACD;AACD,OAAO,SAASI,gBAAT,CAA0BC,OAA1B,EAAmC;AACxC;AACA;AACA,MAAIC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAnB,CAHwC,CAGA;;AAExC,MAAIC,UAAU,GAAG,EAAjB,CALwC,CAKnB;;AAErB,MAAIC,qBAAqB,GAAGH,MAAM,CAACC,MAAP,CAAc,IAAd,CAA5B;AACA,SAAO;AACLG,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClD,aAAO,KAAP;AACD,KAHI;AAILC,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpDC,MAAAA,oBAAoB,CAACD,IAAD,CAApB;AACA,aAAO,KAAP;AACD;AAPI,GAAP,CARwC,CAgBrC;AACH;AACA;;AAEA,WAASC,oBAAT,CAA8BC,QAA9B,EAAwC;AACtC,QAAIT,YAAY,CAACS,QAAQ,CAACC,IAAT,CAAcC,KAAf,CAAhB,EAAuC;AACrC;AACD;;AAED,QAAIC,YAAY,GAAGH,QAAQ,CAACC,IAAT,CAAcC,KAAjC;AACAX,IAAAA,YAAY,CAACY,YAAD,CAAZ,GAA6B,IAA7B;AACA,QAAIC,WAAW,GAAGd,OAAO,CAACe,kBAAR,CAA2BL,QAAQ,CAACM,YAApC,CAAlB;;AAEA,QAAIF,WAAW,CAAClB,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B;AACD;;AAEDS,IAAAA,qBAAqB,CAACQ,YAAD,CAArB,GAAsCT,UAAU,CAACR,MAAjD;AACA,QAAIqB,yBAAyB,GAAG,IAAhC;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AACA,QAAIC,cAAc,GAAGC,SAArB;;AAEA,QAAI;AACF,WAAK,IAAIC,SAAS,GAAGP,WAAW,CAACQ,MAAM,CAACC,QAAR,CAAX,EAAhB,EAAgDC,KAArD,EAA4D,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAA5D,EAA4HT,yBAAyB,GAAG,IAAxJ,EAA8J;AAC5J,YAAIU,UAAU,GAAGH,KAAK,CAACZ,KAAvB;AACA,YAAIgB,UAAU,GAAGD,UAAU,CAAChB,IAAX,CAAgBC,KAAjC;AACA,YAAIiB,UAAU,GAAGxB,qBAAqB,CAACuB,UAAD,CAAtC;AACAxB,QAAAA,UAAU,CAAC0B,IAAX,CAAgBH,UAAhB;;AAEA,YAAIE,UAAU,KAAKT,SAAnB,EAA8B;AAC5B,cAAIW,cAAc,GAAG/B,OAAO,CAACgC,WAAR,CAAoBJ,UAApB,CAArB;;AAEA,cAAIG,cAAJ,EAAoB;AAClBtB,YAAAA,oBAAoB,CAACsB,cAAD,CAApB;AACD;AACF,SAND,MAMO;AACL,cAAIE,SAAS,GAAG7B,UAAU,CAAC8B,KAAX,CAAiBL,UAAjB,CAAhB;AACA,cAAIM,aAAa,GAAGF,SAAS,CAACC,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,EAAuBE,GAAvB,CAA2B,UAAUC,CAAV,EAAa;AAC1D,mBAAOA,CAAC,CAAC1B,IAAF,CAAOC,KAAd;AACD,WAFmB,CAApB;AAGAZ,UAAAA,OAAO,CAACsC,WAAR,CAAoB,IAAI/C,YAAJ,CAAiBC,iBAAiB,CAACoC,UAAD,EAAaO,aAAb,CAAlC,EAA+DF,SAA/D,CAApB;AACD;;AAED7B,QAAAA,UAAU,CAACmC,GAAX;AACD;AACF,KAvBD,CAuBE,OAAOC,GAAP,EAAY;AACZtB,MAAAA,iBAAiB,GAAG,IAApB;AACAC,MAAAA,cAAc,GAAGqB,GAAjB;AACD,KA1BD,SA0BU;AACR,UAAI;AACF,YAAI,CAACvB,yBAAD,IAA8BI,SAAS,CAACoB,MAAV,IAAoB,IAAtD,EAA4D;AAC1DpB,UAAAA,SAAS,CAACoB,MAAV;AACD;AACF,OAJD,SAIU;AACR,YAAIvB,iBAAJ,EAAuB;AACrB,gBAAMC,cAAN;AACD;AACF;AACF;;AAEDd,IAAAA,qBAAqB,CAACQ,YAAD,CAArB,GAAsCO,SAAtC;AACD;AACF","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return \"Cannot spread fragment \\\"\".concat(fragName, \"\\\" within itself\").concat(via, \".\");\n}\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = spreadNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var spreadNode = _step.value;\n        var spreadName = spreadNode.name.value;\n        var cycleIndex = spreadPathIndexByName[spreadName];\n        spreadPath.push(spreadNode);\n\n        if (cycleIndex === undefined) {\n          var spreadFragment = context.getFragment(spreadName);\n\n          if (spreadFragment) {\n            detectCycleRecursive(spreadFragment);\n          }\n        } else {\n          var cyclePath = spreadPath.slice(cycleIndex);\n          var fragmentNames = cyclePath.slice(0, -1).map(function (s) {\n            return s.name.value;\n          });\n          context.reportError(new GraphQLError(cycleErrorMessage(spreadName, fragmentNames), cyclePath));\n        }\n\n        spreadPath.pop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n"],"file":"NoFragmentCycles.js"}