{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/UniqueDirectivesPerLocation.mjs"],"names":["GraphQLError","Kind","specifiedDirectives","duplicateDirectiveMessage","directiveName","concat","UniqueDirectivesPerLocation","context","uniqueDirectiveMap","Object","create","schema","getSchema","definedDirectives","getDirectives","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","directive","value","name","isRepeatable","err","return","astDefinitions","getDocument","definitions","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","def","kind","DIRECTIVE_DEFINITION","repeatable","enter","node","directives","knownDirectives","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","reportError"],"mappings":"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","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { Kind } from '../../language/kinds';\nimport { specifiedDirectives } from '../../type/directives';\nexport function duplicateDirectiveMessage(directiveName) {\n  return \"The directive \\\"\".concat(directiveName, \"\\\" can only be used once at this location.\");\n}\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n */\n\nexport function UniqueDirectivesPerLocation(context) {\n  var uniqueDirectiveMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = definedDirectives[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var directive = _step.value;\n      uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var astDefinitions = context.getDocument().definitions;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = astDefinitions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var def = _step2.value;\n\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        uniqueDirectiveMap[def.name.value] = !def.repeatable;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      // Flow can't refine that node.directives will only contain directives,\n      // so we cast so the rest of the code is well typed.\n      var directives = node.directives;\n\n      if (directives) {\n        var knownDirectives = Object.create(null);\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = directives[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var directive = _step3.value;\n            var directiveName = directive.name.value;\n\n            if (uniqueDirectiveMap[directiveName]) {\n              if (knownDirectives[directiveName]) {\n                context.reportError(new GraphQLError(duplicateDirectiveMessage(directiveName), [knownDirectives[directiveName], directive]));\n              } else {\n                knownDirectives[directiveName] = directive;\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      }\n    }\n  };\n}\n"],"file":"UniqueDirectivesPerLocation.js"}