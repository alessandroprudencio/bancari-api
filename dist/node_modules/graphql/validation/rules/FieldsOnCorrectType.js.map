{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/FieldsOnCorrectType.mjs"],"names":["GraphQLError","suggestionList","didYouMean","isObjectType","isInterfaceType","isAbstractType","undefinedFieldMessage","fieldName","type","suggestedTypeNames","suggestedFieldNames","quotedTypeNames","map","x","concat","quotedFieldNames","FieldsOnCorrectType","context","Field","node","getParentType","fieldDef","getFieldDef","schema","getSchema","name","value","getSuggestedTypeNames","length","getSuggestedFieldNames","reportError","suggestedObjectTypes","interfaceUsageCount","Object","create","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getPossibleTypes","Symbol","iterator","_step","next","done","possibleType","getFields","push","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getInterfaces","_step2","possibleInterface","err","return","suggestedInterfaceTypes","keys","sort","a","b","possibleFieldNames"],"mappings":"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","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport didYouMean from '../../jsutils/didYouMean';\nimport { isObjectType, isInterfaceType, isAbstractType } from '../../type/definition';\nexport function undefinedFieldMessage(fieldName, type, suggestedTypeNames, suggestedFieldNames) {\n  var quotedTypeNames = suggestedTypeNames.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  });\n  var quotedFieldNames = suggestedFieldNames.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  });\n  return \"Cannot query field \\\"\".concat(fieldName, \"\\\" on type \\\"\").concat(type, \"\\\".\") + (didYouMean('to use an inline fragment on', quotedTypeNames) || didYouMean(quotedFieldNames));\n}\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\n\nexport function FieldsOnCorrectType(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getParentType();\n\n      if (type) {\n        var fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          var schema = context.getSchema();\n          var fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          var suggestedTypeNames = getSuggestedTypeNames(schema, type, fieldName); // If there are no suggested types, then perhaps this was a typo?\n\n          var suggestedFieldNames = suggestedTypeNames.length !== 0 ? [] : getSuggestedFieldNames(schema, type, fieldName); // Report an error, including helpful suggestions.\n\n          context.reportError(new GraphQLError(undefinedFieldMessage(fieldName, type.name, suggestedTypeNames, suggestedFieldNames), node));\n        }\n      }\n    }\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest\n * them, sorted by how often the type is referenced, starting with Interfaces.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (isAbstractType(type)) {\n    var suggestedObjectTypes = [];\n    var interfaceUsageCount = Object.create(null);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = schema.getPossibleTypes(type)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var possibleType = _step.value;\n\n        if (!possibleType.getFields()[fieldName]) {\n          continue;\n        } // This object type defines this field.\n\n\n        suggestedObjectTypes.push(possibleType.name);\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n          for (var _iterator2 = possibleType.getInterfaces()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n            var possibleInterface = _step2.value;\n\n            if (!possibleInterface.getFields()[fieldName]) {\n              continue;\n            } // This interface type defines this field.\n\n\n            interfaceUsageCount[possibleInterface.name] = (interfaceUsageCount[possibleInterface.name] || 0) + 1;\n          }\n        } catch (err) {\n          _didIteratorError2 = true;\n          _iteratorError2 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n              _iterator2.return();\n            }\n          } finally {\n            if (_didIteratorError2) {\n              throw _iteratorError2;\n            }\n          }\n        }\n      } // Suggest interface types based on how common they are.\n\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var suggestedInterfaceTypes = Object.keys(interfaceUsageCount).sort(function (a, b) {\n      return interfaceUsageCount[b] - interfaceUsageCount[a];\n    }); // Suggest both interface and object types.\n\n    return suggestedInterfaceTypes.concat(suggestedObjectTypes);\n  } // Otherwise, must be an Object type, which does not have possible fields.\n\n\n  return [];\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(schema, type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}\n"],"file":"FieldsOnCorrectType.js"}