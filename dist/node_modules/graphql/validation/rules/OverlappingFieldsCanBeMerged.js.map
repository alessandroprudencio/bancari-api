{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/OverlappingFieldsCanBeMerged.mjs"],"names":["find","objectEntries","GraphQLError","inspect","Kind","print","getNamedType","isNonNullType","isLeafType","isObjectType","isListType","isInterfaceType","typeFromAST","fieldsConflictMessage","responseName","reason","concat","reasonMessage","Array","isArray","map","_ref","subreason","join","OverlappingFieldsCanBeMerged","context","comparedFragmentPairs","PairSet","cachedFieldsAndFragmentNames","Map","SelectionSet","selectionSet","conflicts","findConflictsWithinSelectionSet","getParentType","_i","_conflicts","length","_ref3","_ref2$","fields1","fields2","reportError","parentType","_getFieldsAndFragment","getFieldsAndFragmentNames","fieldMap","fragmentNames","collectConflictsWithin","comparedFragments","Object","create","i","collectConflictsBetweenFieldsAndFragment","j","collectConflictsBetweenFragments","areMutuallyExclusive","fragmentName","fragment","getFragment","_getReferencedFieldsA","getReferencedFieldsAndFragmentNames","fieldMap2","fragmentNames2","collectConflictsBetween","fragmentName1","fragmentName2","has","add","fragment1","fragment2","_getReferencedFieldsA2","fieldMap1","fragmentNames1","_getReferencedFieldsA3","findConflictsBetweenSubSelectionSets","parentType1","selectionSet1","parentType2","selectionSet2","_getFieldsAndFragment2","_getFieldsAndFragment3","_comparedFragments","_i2","_j","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","_ref5","value","fields","conflict","findConflict","push","err","return","parentFieldsAreMutuallyExclusive","_i3","_Object$keys","keys","field1","field2","node1","def1","node2","def2","type1","type","type2","name1","name","name2","sameArguments","arguments","doTypesConflict","subfieldConflicts","arguments1","arguments2","every","argument1","argument2","argument","sameValue","value1","value2","ofType","cached","get","nodeAndDefs","_collectFieldsAndFragmentNames","set","fragmentType","getSchema","typeCondition","selections","selection","kind","FIELD","fieldName","fieldDef","getFields","alias","FRAGMENT_SPREAD","INLINE_FRAGMENT","inlineFragmentType","_ref6","reduce","allFields","_ref7","_ref8","_data","_proto","prototype","a","b","first","result","_pairSetAdd","data"],"mappings":"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","sourcesContent":["import find from '../../polyfills/find';\nimport objectEntries from '../../polyfills/objectEntries';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport inspect from '../../jsutils/inspect';\nimport { Kind } from '../../language/kinds';\nimport { print } from '../../language/printer';\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from '../../type/definition';\nimport { typeFromAST } from '../../utilities/typeFromAST';\nexport function fieldsConflictMessage(responseName, reason) {\n  return \"Fields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMessage(reason), \". \") + 'Use different aliases on the fields to fetch both if this was intentional.';\n}\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(function (_ref) {\n      var responseName = _ref[0],\n          subreason = _ref[1];\n      return \"subfields \\\"\".concat(responseName, \"\\\" conflict because \").concat(reasonMessage(subreason));\n    }).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMerged(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  var comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  var cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet: function SelectionSet(selectionSet) {\n      var conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (var _i = 0, _conflicts = conflicts; _i < _conflicts.length; _i++) {\n        var _ref3 = _conflicts[_i];\n        var _ref2$ = _ref3[0];\n        var responseName = _ref2$[0];\n        var reason = _ref2$[1];\n        var fields1 = _ref3[1];\n        var fields2 = _ref3[2];\n        context.reportError(new GraphQLError(fieldsConflictMessage(responseName, reason), fields1.concat(fields2)));\n      }\n    }\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet),\n      fieldMap = _getFieldsAndFragment[0],\n      fragmentNames = _getFieldsAndFragment[1]; // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    var comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (var j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  // Memoize so a fragment is not compared for conflicts more than once.\n  if (comparedFragments[fragmentName]) {\n    return;\n  }\n\n  comparedFragments[fragmentName] = true;\n  var fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  var _getReferencedFieldsA = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment),\n      fieldMap2 = _getReferencedFieldsA[0],\n      fragmentNames2 = _getReferencedFieldsA[1]; // Do not compare a fragment's fieldMap to itself.\n\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (var i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  var fragment1 = context.getFragment(fragmentName1);\n  var fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  var _getReferencedFieldsA2 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1),\n      fieldMap1 = _getReferencedFieldsA2[0],\n      fragmentNames1 = _getReferencedFieldsA2[1];\n\n  var _getReferencedFieldsA3 = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2),\n      fieldMap2 = _getReferencedFieldsA3[0],\n      fragmentNames2 = _getReferencedFieldsA3[1]; // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (var j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (var i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  var conflicts = [];\n\n  var _getFieldsAndFragment2 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1),\n      fieldMap1 = _getFieldsAndFragment2[0],\n      fragmentNames1 = _getFieldsAndFragment2[1];\n\n  var _getFieldsAndFragment3 = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2),\n      fieldMap2 = _getFieldsAndFragment3[0],\n      fragmentNames2 = _getFieldsAndFragment3[1]; // (H) First, collect all conflicts between these two collections of field.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    var comparedFragments = Object.create(null);\n\n    for (var j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    var _comparedFragments = Object.create(null);\n\n    for (var i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, _comparedFragments, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (var _i2 = 0; _i2 < fragmentNames1.length; _i2++) {\n    for (var _j = 0; _j < fragmentNames2.length; _j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[_i2], fragmentNames2[_j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = objectEntries(fieldMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _ref5 = _step.value;\n      var responseName = _ref5[0];\n      var fields = _ref5[1];\n\n      // This compares every field in the list to every other field in this list\n      // (except to itself). If the list only has one item, nothing needs to\n      // be compared.\n      if (fields.length > 1) {\n        for (var i = 0; i < fields.length; i++) {\n          for (var j = i + 1; j < fields.length; j++) {\n            var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n            responseName, fields[i], fields[j]);\n\n            if (conflict) {\n              conflicts.push(conflict);\n            }\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (var _i3 = 0, _Object$keys = Object.keys(fieldMap1); _i3 < _Object$keys.length; _i3++) {\n    var responseName = _Object$keys[_i3];\n    var fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      var fields1 = fieldMap1[responseName];\n\n      for (var i = 0; i < fields1.length; i++) {\n        for (var j = 0; j < fields2.length; j++) {\n          var conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  var parentType1 = field1[0],\n      node1 = field1[1],\n      def1 = field1[2];\n  var parentType2 = field2[0],\n      node2 = field2[1],\n      def2 = field2[2]; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  var areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2); // The return type for each field.\n\n  var type1 = def1 && def1.type;\n  var type2 = def2 && def2.type;\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    var name1 = node1.name.value;\n    var name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, \"\".concat(name1, \" and \").concat(name2, \" are different fields\")], [node1], [node2]];\n    } // Two field calls must have the same arguments.\n\n\n    if (!sameArguments(node1.arguments || [], node2.arguments || [])) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  }\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, \"they return conflicting types \".concat(inspect(type1), \" and \").concat(inspect(type2))], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  var selectionSet1 = node1.selectionSet;\n  var selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    var conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(function (argument1) {\n    var argument2 = find(arguments2, function (argument) {\n      return argument.name.value === argument1.name.value;\n    });\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return !value1 && !value2 || print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  var cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    var nodeAndDefs = Object.create(null);\n    var fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  var cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  var fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (var i = 0; i < selectionSet.selections.length; i++) {\n    var selection = selectionSet.selections[i];\n\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          var fieldName = selection.name.value;\n          var fieldDef = void 0;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          var responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          var typeCondition = selection.typeCondition;\n          var inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(function (_ref6) {\n      var reason = _ref6[0];\n      return reason;\n    })], conflicts.reduce(function (allFields, _ref7) {\n      var fields1 = _ref7[1];\n      return allFields.concat(fields1);\n    }, [node1]), conflicts.reduce(function (allFields, _ref8) {\n      var fields2 = _ref8[2];\n      return allFields.concat(fields2);\n    }, [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nvar PairSet =\n/*#__PURE__*/\nfunction () {\n  function PairSet() {\n    this._data = Object.create(null);\n  }\n\n  var _proto = PairSet.prototype;\n\n  _proto.has = function has(a, b, areMutuallyExclusive) {\n    var first = this._data[a];\n    var result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  };\n\n  _proto.add = function add(a, b, areMutuallyExclusive) {\n    _pairSetAdd(this._data, a, b, areMutuallyExclusive);\n\n    _pairSetAdd(this._data, b, a, areMutuallyExclusive);\n  };\n\n  return PairSet;\n}();\n\nfunction _pairSetAdd(data, a, b, areMutuallyExclusive) {\n  var map = data[a];\n\n  if (!map) {\n    map = Object.create(null);\n    data[a] = map;\n  }\n\n  map[b] = areMutuallyExclusive;\n}\n"],"file":"OverlappingFieldsCanBeMerged.js"}