{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/ValuesOfCorrectType.mjs"],"names":["objectValues","GraphQLError","print","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","inspect","isInvalid","keyMap","didYouMean","suggestionList","badValueMessage","typeName","valueName","message","concat","badEnumValueMessage","suggestedValues","requiredFieldMessage","fieldName","fieldTypeName","unknownFieldMessage","suggestedFields","ValuesOfCorrectType","context","NullValue","node","type","getInputType","reportError","ListValue","getParentInputType","isValidScalar","ObjectValue","fieldNodeMap","fields","field","name","value","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getFields","Symbol","iterator","_step","next","done","fieldDef","fieldNode","typeStr","err","return","ObjectField","parentType","fieldType","suggestions","Object","keys","EnumValue","getValue","enumTypeSuggestion","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","error","allNames","getValues","map"],"mappings":"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","sourcesContent":["import objectValues from '../../polyfills/objectValues';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport keyMap from '../../jsutils/keyMap';\nimport didYouMean from '../../jsutils/didYouMean';\nimport suggestionList from '../../jsutils/suggestionList';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function badEnumValueMessage(typeName, valueName, suggestedValues) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName, \".\") + didYouMean('the enum value', suggestedValues);\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \").concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, suggestedFields) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName, \".\") + didYouMean(suggestedFields);\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = objectValues(type.getFields())[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var fieldDef = _step.value;\n          var fieldNode = fieldNodeMap[fieldDef.name];\n\n          if (!fieldNode && isRequiredInputField(fieldDef)) {\n            var typeStr = inspect(fieldDef.type);\n            context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldDef.name, typeStr), node));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, suggestions), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badEnumValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    var message = isEnumType(type) ? badEnumValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)) : badValueMessage(inspect(locationType), print(node));\n    context.reportError(new GraphQLError(message, node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  var allNames = type.getValues().map(function (value) {\n    return value.name;\n  });\n  return suggestionList(print(node), allNames);\n}\n"],"file":"ValuesOfCorrectType.js"}