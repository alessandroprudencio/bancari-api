{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/UniqueFieldDefinitionNames.mjs"],"names":["GraphQLError","isObjectType","isInterfaceType","isInputObjectType","duplicateFieldDefinitionNameMessage","typeName","fieldName","concat","existedFieldDefinitionNameMessage","UniqueFieldDefinitionNames","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownFieldNames","InputObjectTypeDefinition","checkFieldUniqueness","InputObjectTypeExtension","InterfaceTypeDefinition","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","node","name","value","fields","fieldNames","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","fieldDef","hasField","reportError","err","return","type","getFields"],"mappings":"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","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport { isObjectType, isInterfaceType, isInputObjectType } from '../../type/definition';\nexport function duplicateFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" can only be defined once.\");\n}\nexport function existedFieldDefinitionNameMessage(typeName, fieldName) {\n  return \"Field \\\"\".concat(typeName, \".\").concat(fieldName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\");\n}\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\n\nexport function UniqueFieldDefinitionNames(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    var typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    }\n\n    if (node.fields) {\n      var fieldNames = knownFieldNames[typeName];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = node.fields[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var fieldDef = _step.value;\n          var fieldName = fieldDef.name.value;\n\n          if (hasField(existingTypeMap[typeName], fieldName)) {\n            context.reportError(new GraphQLError(existedFieldDefinitionNameMessage(typeName, fieldName), fieldDef.name));\n          } else if (fieldNames[fieldName]) {\n            context.reportError(new GraphQLError(duplicateFieldDefinitionNameMessage(typeName, fieldName), [fieldNames[fieldName], fieldDef.name]));\n          } else {\n            fieldNames[fieldName] = fieldDef.name;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName];\n  }\n\n  return false;\n}\n"],"file":"UniqueFieldDefinitionNames.js"}