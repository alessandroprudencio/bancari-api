{"version":3,"sources":["../../../../../node_modules/graphql/validation/rules/KnownTypeNames.mjs"],"names":["GraphQLError","suggestionList","didYouMean","isTypeDefinitionNode","isTypeSystemDefinitionNode","isTypeSystemExtensionNode","specifiedScalarTypes","unknownTypeMessage","typeName","suggestedTypes","concat","map","x","KnownTypeNames","context","schema","getSchema","existingTypesMap","getTypeMap","Object","create","definedTypes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getDocument","definitions","Symbol","iterator","_step","next","done","def","value","name","err","return","typeNames","keys","NamedType","node","_1","parent","_2","ancestors","definitionNode","isSDL","isSDLNode","isSpecifiedScalarName","specifiedScalarsNames","reportError","type","indexOf","Boolean","Array","isArray"],"mappings":"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","sourcesContent":["import { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport didYouMean from '../../jsutils/didYouMean';\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from '../../language/predicates';\nimport { specifiedScalarTypes } from '../../type/scalars';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  return \"Unknown type \\\"\".concat(typeName, \"\\\".\") + didYouMean(suggestedTypes.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  }));\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  var schema = context.getSchema();\n  var existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  var definedTypes = Object.create(null);\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = context.getDocument().definitions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var def = _step.value;\n\n      if (isTypeDefinitionNode(def)) {\n        definedTypes[def.name.value] = true;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  var typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType: function NamedType(node, _1, parent, _2, ancestors) {\n      var typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        var definitionNode = ancestors[2] || parent;\n        var isSDL = isSDLNode(definitionNode);\n\n        if (isSDL && isSpecifiedScalarName(typeName)) {\n          return;\n        }\n\n        var suggestedTypes = suggestionList(typeName, isSDL ? specifiedScalarsNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestedTypes), node));\n      }\n    }\n  };\n}\nvar specifiedScalarsNames = specifiedScalarTypes.map(function (type) {\n  return type.name;\n});\n\nfunction isSpecifiedScalarName(typeName) {\n  return specifiedScalarsNames.indexOf(typeName) !== -1;\n}\n\nfunction isSDLNode(value) {\n  return Boolean(value && !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value)));\n}\n"],"file":"KnownTypeNames.js"}