{"version":3,"sources":["../../../../node_modules/graphql/type/schema.mjs"],"names":["find","objectValues","isObjectLike","isAbstractType","isObjectType","isInterfaceType","isUnionType","isInputObjectType","isWrappingType","GraphQLDirective","isDirective","specifiedDirectives","inspect","__Schema","defineToStringTag","instanceOf","invariant","isSchema","schema","GraphQLSchema","assertSchema","concat","config","assumeValid","__validationErrors","undefined","types","Array","isArray","directives","allowedLegacyNames","__allowedLegacyNames","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","astNode","extensionASTNodes","initialTypes","getQueryType","getMutationType","getSubscriptionType","typeMap","Object","create","reduce","typeMapReducer","typeMapDirectiveReducer","_typeMap","_possibleTypeMap","_implementations","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","Symbol","iterator","_step","next","done","type","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getInterfaces","_step2","iface","impls","name","push","err","return","_proto","prototype","getTypeMap","getType","getPossibleTypes","abstractType","getTypes","isPossibleType","possibleType","possibleTypeMap","possibleTypes","map","Boolean","getDirectives","getDirective","directive","toConfig","slice","ofType","reducedMap","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","getFields","_step3","field","args","fieldArgTypes","arg","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_field","_map"],"mappings":"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","sourcesContent":["import find from '../polyfills/find';\nimport objectValues from '../polyfills/objectValues';\nimport isObjectLike from '../jsutils/isObjectLike';\nimport { isAbstractType, isObjectType, isInterfaceType, isUnionType, isInputObjectType, isWrappingType } from './definition';\nimport { GraphQLDirective, isDirective, specifiedDirectives } from './directives';\nimport inspect from '../jsutils/inspect';\nimport { __Schema } from './introspection';\nimport defineToStringTag from '../jsutils/defineToStringTag';\nimport instanceOf from '../jsutils/instanceOf';\nimport invariant from '../jsutils/invariant';\n// eslint-disable-next-line no-redeclare\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  !isSchema(schema) ? invariant(0, \"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\")) : void 0;\n  return schema;\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n *     const characterInterface = new GraphQLInterfaceType({\n *       name: 'Character',\n *       ...\n *     });\n *\n *     const humanType = new GraphQLObjectType({\n *       name: 'Human',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const droidType = new GraphQLObjectType({\n *       name: 'Droid',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const schema = new GraphQLSchema({\n *       query: new GraphQLObjectType({\n *         name: 'Query',\n *         fields: {\n *           hero: { type: characterInterface, ... },\n *         }\n *       }),\n *       ...\n *       // Since this schema references only the `Character` interface it's\n *       // necessary to explicitly list the types that implement it if\n *       // you want them to be included in the final schema.\n *       types: [humanType, droidType],\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport var GraphQLSchema =\n/*#__PURE__*/\nfunction () {\n  // Used as a cache for validateSchema().\n  // Referenced by validateSchema().\n  function GraphQLSchema(config) {\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    if (config && config.assumeValid) {\n      this.__validationErrors = [];\n    } else {\n      this.__validationErrors = undefined; // Otherwise check for common mistakes during construction to produce\n      // clear and early error messages.\n\n      !isObjectLike(config) ? invariant(0, 'Must provide configuration object.') : void 0;\n      !(!config.types || Array.isArray(config.types)) ? invariant(0, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\")) : void 0;\n      !(!config.directives || Array.isArray(config.directives)) ? invariant(0, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\")) : void 0;\n      !(!config.allowedLegacyNames || Array.isArray(config.allowedLegacyNames)) ? invariant(0, '\"allowedLegacyNames\" must be Array if provided but got: ' + \"\".concat(inspect(config.allowedLegacyNames), \".\")) : void 0;\n    }\n\n    this.__allowedLegacyNames = config.allowedLegacyNames || [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives || specifiedDirectives;\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes; // Build type map now to detect any errors within this schema.\n\n    var initialTypes = [this.getQueryType(), this.getMutationType(), this.getSubscriptionType(), __Schema];\n    var types = config.types;\n\n    if (types) {\n      initialTypes = initialTypes.concat(types);\n    } // Keep track of all types referenced within the schema.\n\n\n    var typeMap = Object.create(null); // First by deeply visiting all initial types.\n\n    typeMap = initialTypes.reduce(typeMapReducer, typeMap); // Then by deeply visiting all directive types.\n\n    typeMap = this._directives.reduce(typeMapDirectiveReducer, typeMap); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = typeMap;\n    this._possibleTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementations = Object.create(null);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = objectValues(this._typeMap)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var type = _step.value;\n\n        if (isObjectType(type)) {\n          var _iteratorNormalCompletion2 = true;\n          var _didIteratorError2 = false;\n          var _iteratorError2 = undefined;\n\n          try {\n            for (var _iterator2 = type.getInterfaces()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n              var iface = _step2.value;\n\n              if (isInterfaceType(iface)) {\n                var impls = this._implementations[iface.name];\n\n                if (impls) {\n                  impls.push(type);\n                } else {\n                  this._implementations[iface.name] = [type];\n                }\n              }\n            }\n          } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n            } finally {\n              if (_didIteratorError2) {\n                throw _iteratorError2;\n              }\n            }\n          }\n        } else if (isAbstractType(type) && !this._implementations[type.name]) {\n          this._implementations[type.name] = [];\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  var _proto = GraphQLSchema.prototype;\n\n  _proto.getQueryType = function getQueryType() {\n    return this._queryType;\n  };\n\n  _proto.getMutationType = function getMutationType() {\n    return this._mutationType;\n  };\n\n  _proto.getSubscriptionType = function getSubscriptionType() {\n    return this._subscriptionType;\n  };\n\n  _proto.getTypeMap = function getTypeMap() {\n    return this._typeMap;\n  };\n\n  _proto.getType = function getType(name) {\n    return this.getTypeMap()[name];\n  };\n\n  _proto.getPossibleTypes = function getPossibleTypes(abstractType) {\n    if (isUnionType(abstractType)) {\n      return abstractType.getTypes();\n    }\n\n    return this._implementations[abstractType.name];\n  };\n\n  _proto.isPossibleType = function isPossibleType(abstractType, possibleType) {\n    var possibleTypeMap = this._possibleTypeMap;\n\n    if (!possibleTypeMap[abstractType.name]) {\n      var possibleTypes = this.getPossibleTypes(abstractType);\n      possibleTypeMap[abstractType.name] = possibleTypes.reduce(function (map, type) {\n        map[type.name] = true;\n        return map;\n      }, Object.create(null));\n    }\n\n    return Boolean(possibleTypeMap[abstractType.name][possibleType.name]);\n  };\n\n  _proto.getDirectives = function getDirectives() {\n    return this._directives;\n  };\n\n  _proto.getDirective = function getDirective(name) {\n    return find(this.getDirectives(), function (directive) {\n      return directive.name === name;\n    });\n  };\n\n  _proto.toConfig = function toConfig() {\n    return {\n      types: objectValues(this.getTypeMap()),\n      directives: this.getDirectives().slice(),\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || [],\n      assumeValid: this.__validationErrors !== undefined,\n      allowedLegacyNames: this.__allowedLegacyNames\n    };\n  };\n\n  return GraphQLSchema;\n}(); // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(GraphQLSchema);\n\nfunction typeMapReducer(map, type) {\n  if (!type) {\n    return map;\n  }\n\n  if (isWrappingType(type)) {\n    return typeMapReducer(map, type.ofType);\n  }\n\n  if (map[type.name]) {\n    !(map[type.name] === type) ? invariant(0, 'Schema must contain uniquely named types but contains multiple ' + \"types named \\\"\".concat(type.name, \"\\\".\")) : void 0;\n    return map;\n  }\n\n  map[type.name] = type;\n  var reducedMap = map;\n\n  if (isUnionType(type)) {\n    reducedMap = type.getTypes().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type)) {\n    reducedMap = type.getInterfaces().reduce(typeMapReducer, reducedMap);\n  }\n\n  if (isObjectType(type) || isInterfaceType(type)) {\n    var _iteratorNormalCompletion3 = true;\n    var _didIteratorError3 = false;\n    var _iteratorError3 = undefined;\n\n    try {\n      for (var _iterator3 = objectValues(type.getFields())[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n        var field = _step3.value;\n\n        if (field.args) {\n          var fieldArgTypes = field.args.map(function (arg) {\n            return arg.type;\n          });\n          reducedMap = fieldArgTypes.reduce(typeMapReducer, reducedMap);\n        }\n\n        reducedMap = typeMapReducer(reducedMap, field.type);\n      }\n    } catch (err) {\n      _didIteratorError3 = true;\n      _iteratorError3 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n          _iterator3.return();\n        }\n      } finally {\n        if (_didIteratorError3) {\n          throw _iteratorError3;\n        }\n      }\n    }\n  }\n\n  if (isInputObjectType(type)) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = objectValues(type.getFields())[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var _field = _step4.value;\n        reducedMap = typeMapReducer(reducedMap, _field.type);\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  }\n\n  return reducedMap;\n}\n\nfunction typeMapDirectiveReducer(map, directive) {\n  // Directives are not validated until validateSchema() is called.\n  if (!isDirective(directive)) {\n    return map;\n  }\n\n  return directive.args.reduce(function (_map, arg) {\n    return typeMapReducer(_map, arg.type);\n  }, map);\n}\n"],"file":"schema.js"}