{"version":3,"sources":["../../../../node_modules/graphql/type/validate.mjs"],"names":["find","flatMap","objectValues","objectEntries","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isNamedType","isNonNullType","isInputType","isOutputType","isRequiredArgument","isDirective","isIntrospectionType","assertSchema","inspect","GraphQLError","isValidNameError","isEqualType","isTypeSubTypeOf","validateSchema","schema","__validationErrors","context","SchemaValidationContext","validateRootTypes","validateDirectives","validateTypes","errors","getErrors","assertValidSchema","length","Error","map","error","message","join","_errors","_proto","prototype","reportError","nodes","_nodes","Array","isArray","filter","Boolean","addError","push","queryType","getQueryType","astNode","concat","getOperationTypeNode","mutationType","getMutationType","subscriptionType","getSubscriptionType","type","operation","operationNodes","getAllSubNodes","node","operationTypes","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","value","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","getDirectives","_step2","directive","validateName","argNames","Object","create","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_loop","arg","_step3","argName","name","args","_ref","_ref2","_iterator3","_ret","__allowedLegacyNames","indexOf","validateInputObjectCircularRefs","createInputObjectCircularRefsValidator","typeMap","getTypeMap","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","validateFields","validateObjectInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","fields","getFields","getAllNodes","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","field","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_loop2","_step6","_ref3","_ref4","_iterator6","object","implementedTypeNames","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","getInterfaces","_step7","iface","getAllImplementsInterfaceNodes","validateObjectImplementsInterface","objectFieldMap","ifaceFieldMap","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","_ref6","fieldName","ifaceField","objectField","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_loop3","ifaceArg","_step9","objectArg","_iterator9","_ret2","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_loop4","_step10","_iterator10","union","memberTypes","getTypes","includedTypeNames","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","memberType","getUnionMemberTypeNodes","String","enumType","enumValues","getValues","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_iterator12","_step12","enumValue","valueName","inputObj","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_iterator13","_step13","visitedTypes","fieldPath","fieldPathIndexByTypeName","detectCycleRecursive","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_iterator14","_step14","ofType","fieldType","cycleIndex","cyclePath","slice","pathStr","fieldObj","pop","extensionASTNodes","getter","item","typeNode","interfaces","ifaceNode","typeName","unionNode","types"],"mappings":"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","sourcesContent":["import find from '../polyfills/find';\nimport flatMap from '../polyfills/flatMap';\nimport objectValues from '../polyfills/objectValues';\nimport objectEntries from '../polyfills/objectEntries';\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument } from './definition';\nimport { isDirective } from './directives';\nimport { isIntrospectionType } from './introspection';\nimport { assertSchema } from './schema';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { isValidNameError } from '../utilities/assertValidName';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\n\nvar SchemaValidationContext =\n/*#__PURE__*/\nfunction () {\n  function SchemaValidationContext(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  var _proto = SchemaValidationContext.prototype;\n\n  _proto.reportError = function reportError(message, nodes) {\n    var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  };\n\n  _proto.addError = function addError(error) {\n    this._errors.push(error);\n  };\n\n  _proto.getErrors = function getErrors() {\n    return this._errors;\n  };\n\n  return SchemaValidationContext;\n}();\n\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), getOperationTypeNode(schema, queryType, 'query'));\n  }\n\n  var mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), getOperationTypeNode(schema, mutationType, 'mutation'));\n  }\n\n  var subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), getOperationTypeNode(schema, subscriptionType, 'subscription'));\n  }\n}\n\nfunction getOperationTypeNode(schema, type, operation) {\n  var operationNodes = getAllSubNodes(schema, function (node) {\n    return node.operationTypes;\n  });\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = operationNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var node = _step.value;\n\n      if (node.operation === operation) {\n        return node.type;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return type.astNode;\n}\n\nfunction validateDirectives(context) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = context.schema.getDirectives()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var directive = _step2.value;\n\n      // Ensure all directives are in fact GraphQL directives.\n      if (!isDirective(directive)) {\n        context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive && directive.astNode);\n        continue;\n      } // Ensure they are named correctly.\n\n\n      validateName(context, directive); // TODO: Ensure proper locations.\n      // Ensure the arguments are valid.\n\n      var argNames = Object.create(null);\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var arg = _step3.value;\n          var argName = arg.name; // Ensure they are named correctly.\n\n          validateName(context, arg); // Ensure they are unique per directive.\n\n          if (argNames[argName]) {\n            context.reportError(\"Argument @\".concat(directive.name, \"(\").concat(argName, \":) can only be defined once.\"), directive.astNode && directive.args.filter(function (_ref) {\n              var name = _ref.name;\n              return name === argName;\n            }).map(function (_ref2) {\n              var astNode = _ref2.astNode;\n              return astNode;\n            }));\n            return \"continue\";\n          }\n\n          argNames[argName] = true; // Ensure the type is an input type.\n\n          if (!isInputType(arg.type)) {\n            context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(argName, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n          }\n        };\n\n        for (var _iterator3 = directive.args[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _ret = _loop();\n\n          if (_ret === \"continue\") continue;\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // If a schema explicitly allows some legacy name which is no longer valid,\n  // allow it to be assumed valid.\n  if (context.schema.__allowedLegacyNames.indexOf(node.name) !== -1) {\n    return;\n  } // Ensure names are valid, however introspection types opt out.\n\n\n  var error = isValidNameError(node.name, node.astNode || undefined);\n\n  if (error) {\n    context.addError(error);\n  }\n}\n\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = objectValues(typeMap)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var type = _step4.value;\n\n      // Ensure all provided types are in fact GraphQL type.\n      if (!isNamedType(type)) {\n        context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type && type.astNode);\n        continue;\n      } // Ensure it is named correctly (excluding introspection types).\n\n\n      if (!isIntrospectionType(type)) {\n        validateName(context, type);\n      }\n\n      if (isObjectType(type)) {\n        // Ensure fields are valid\n        validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n        validateObjectInterfaces(context, type);\n      } else if (isInterfaceType(type)) {\n        // Ensure fields are valid.\n        validateFields(context, type);\n      } else if (isUnionType(type)) {\n        // Ensure Unions include valid member types.\n        validateUnionMembers(context, type);\n      } else if (isEnumType(type)) {\n        // Ensure Enums have valid values.\n        validateEnumValues(context, type);\n      } else if (isInputObjectType(type)) {\n        // Ensure Input Object fields are valid.\n        validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n        validateInputObjectCircularRefs(type);\n      }\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  var fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), getAllNodes(type));\n  }\n\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = fields[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var field = _step5.value;\n      // Ensure they are named correctly.\n      validateName(context, field); // Ensure the type is an output type\n\n      if (!isOutputType(field.type)) {\n        context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n      } // Ensure the arguments are valid\n\n\n      var argNames = Object.create(null);\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        var _loop2 = function _loop2() {\n          var arg = _step6.value;\n          var argName = arg.name; // Ensure they are named correctly.\n\n          validateName(context, arg); // Ensure they are unique per field.\n\n          if (argNames[argName]) {\n            context.reportError(\"Field argument \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) can only be defined once.\"), field.args.filter(function (_ref3) {\n              var name = _ref3.name;\n              return name === argName;\n            }).map(function (_ref4) {\n              var astNode = _ref4.astNode;\n              return astNode;\n            }));\n          }\n\n          argNames[argName] = true; // Ensure the type is an input type\n\n          if (!isInputType(arg.type)) {\n            context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), arg.astNode && arg.astNode.type);\n          }\n        };\n\n        for (var _iterator6 = field.args[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          _loop2();\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n\nfunction validateObjectInterfaces(context, object) {\n  var implementedTypeNames = Object.create(null);\n  var _iteratorNormalCompletion7 = true;\n  var _didIteratorError7 = false;\n  var _iteratorError7 = undefined;\n\n  try {\n    for (var _iterator7 = object.getInterfaces()[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n      var iface = _step7.value;\n\n      if (!isInterfaceType(iface)) {\n        context.reportError(\"Type \".concat(inspect(object), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(object, iface));\n        continue;\n      }\n\n      if (implementedTypeNames[iface.name]) {\n        context.reportError(\"Type \".concat(object.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(object, iface));\n        continue;\n      }\n\n      implementedTypeNames[iface.name] = true;\n      validateObjectImplementsInterface(context, object, iface);\n    }\n  } catch (err) {\n    _didIteratorError7 = true;\n    _iteratorError7 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n        _iterator7.return();\n      }\n    } finally {\n      if (_didIteratorError7) {\n        throw _iteratorError7;\n      }\n    }\n  }\n}\n\nfunction validateObjectImplementsInterface(context, object, iface) {\n  var objectFieldMap = object.getFields();\n  var ifaceFieldMap = iface.getFields(); // Assert each interface field is implemented.\n\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = objectEntries(ifaceFieldMap)[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var _ref6 = _step8.value;\n      var fieldName = _ref6[0];\n      var ifaceField = _ref6[1];\n      var objectField = objectFieldMap[fieldName]; // Assert interface field exists on object.\n\n      if (!objectField) {\n        context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(object.name, \" does not provide it.\"), [ifaceField.astNode].concat(getAllNodes(object)));\n        continue;\n      } // Assert interface field type is satisfied by object field type, by being\n      // a valid subtype. (covariant)\n\n\n      if (!isTypeSubTypeOf(context.schema, objectField.type, ifaceField.type)) {\n        context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(object.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(objectField.type), \".\"), [ifaceField.astNode && ifaceField.astNode.type, objectField.astNode && objectField.astNode.type]);\n      } // Assert each interface field arg is implemented.\n\n\n      var _iteratorNormalCompletion9 = true;\n      var _didIteratorError9 = false;\n      var _iteratorError9 = undefined;\n\n      try {\n        var _loop3 = function _loop3() {\n          var ifaceArg = _step9.value;\n          var argName = ifaceArg.name;\n          var objectArg = find(objectField.args, function (arg) {\n            return arg.name === argName;\n          }); // Assert interface field arg exists on object field.\n\n          if (!objectArg) {\n            context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(object.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, objectField.astNode]);\n            return \"continue\";\n          } // Assert interface field arg type matches object field arg type.\n          // (invariant)\n          // TODO: change to contravariant?\n\n\n          if (!isEqualType(ifaceArg.type, objectArg.type)) {\n            context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(object.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(objectArg.type), \".\"), [ifaceArg.astNode && ifaceArg.astNode.type, objectArg.astNode && objectArg.astNode.type]);\n          } // TODO: validate default values?\n\n        };\n\n        for (var _iterator9 = ifaceField.args[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n          var _ret2 = _loop3();\n\n          if (_ret2 === \"continue\") continue;\n        } // Assert additional arguments must not be required.\n\n      } catch (err) {\n        _didIteratorError9 = true;\n        _iteratorError9 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion9 && _iterator9.return != null) {\n            _iterator9.return();\n          }\n        } finally {\n          if (_didIteratorError9) {\n            throw _iteratorError9;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion10 = true;\n      var _didIteratorError10 = false;\n      var _iteratorError10 = undefined;\n\n      try {\n        var _loop4 = function _loop4() {\n          var objectArg = _step10.value;\n          var argName = objectArg.name;\n          var ifaceArg = find(ifaceField.args, function (arg) {\n            return arg.name === argName;\n          });\n\n          if (!ifaceArg && isRequiredArgument(objectArg)) {\n            context.reportError(\"Object field \".concat(object.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [objectArg.astNode, ifaceField.astNode]);\n          }\n        };\n\n        for (var _iterator10 = objectField.args[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n          _loop4();\n        }\n      } catch (err) {\n        _didIteratorError10 = true;\n        _iteratorError10 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion10 && _iterator10.return != null) {\n            _iterator10.return();\n          }\n        } finally {\n          if (_didIteratorError10) {\n            throw _iteratorError10;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), getAllNodes(union));\n  }\n\n  var includedTypeNames = Object.create(null);\n  var _iteratorNormalCompletion11 = true;\n  var _didIteratorError11 = false;\n  var _iteratorError11 = undefined;\n\n  try {\n    for (var _iterator11 = memberTypes[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n      var memberType = _step11.value;\n\n      if (includedTypeNames[memberType.name]) {\n        context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n        continue;\n      }\n\n      includedTypeNames[memberType.name] = true;\n\n      if (!isObjectType(memberType)) {\n        context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n      }\n    }\n  } catch (err) {\n    _didIteratorError11 = true;\n    _iteratorError11 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion11 && _iterator11.return != null) {\n        _iterator11.return();\n      }\n    } finally {\n      if (_didIteratorError11) {\n        throw _iteratorError11;\n      }\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), getAllNodes(enumType));\n  }\n\n  var _iteratorNormalCompletion12 = true;\n  var _didIteratorError12 = false;\n  var _iteratorError12 = undefined;\n\n  try {\n    for (var _iterator12 = enumValues[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n      var enumValue = _step12.value;\n      var valueName = enumValue.name; // Ensure valid name.\n\n      validateName(context, enumValue);\n\n      if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n        context.reportError(\"Enum type \".concat(enumType.name, \" cannot include value: \").concat(valueName, \".\"), enumValue.astNode);\n      }\n    }\n  } catch (err) {\n    _didIteratorError12 = true;\n    _iteratorError12 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion12 && _iterator12.return != null) {\n        _iterator12.return();\n      }\n    } finally {\n      if (_didIteratorError12) {\n        throw _iteratorError12;\n      }\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  var fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  var _iteratorNormalCompletion13 = true;\n  var _didIteratorError13 = false;\n  var _iteratorError13 = undefined;\n\n  try {\n    for (var _iterator13 = fields[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n      var field = _step13.value;\n      // Ensure they are named correctly.\n      validateName(context, field); // Ensure the type is an input type\n\n      if (!isInputType(field.type)) {\n        context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), field.astNode && field.astNode.type);\n      }\n    }\n  } catch (err) {\n    _didIteratorError13 = true;\n    _iteratorError13 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion13 && _iterator13.return != null) {\n        _iterator13.return();\n      }\n    } finally {\n      if (_didIteratorError13) {\n        throw _iteratorError13;\n      }\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = objectValues(inputObj.getFields());\n    var _iteratorNormalCompletion14 = true;\n    var _didIteratorError14 = false;\n    var _iteratorError14 = undefined;\n\n    try {\n      for (var _iterator14 = fields[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n        var field = _step14.value;\n\n        if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n          var fieldType = field.type.ofType;\n          var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n          fieldPath.push(field);\n\n          if (cycleIndex === undefined) {\n            detectCycleRecursive(fieldType);\n          } else {\n            var cyclePath = fieldPath.slice(cycleIndex);\n            var pathStr = cyclePath.map(function (fieldObj) {\n              return fieldObj.name;\n            }).join('.');\n            context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n              return fieldObj.astNode;\n            }));\n          }\n\n          fieldPath.pop();\n        }\n      }\n    } catch (err) {\n      _didIteratorError14 = true;\n      _iteratorError14 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion14 && _iterator14.return != null) {\n          _iterator14.return();\n        }\n      } finally {\n        if (_didIteratorError14) {\n          throw _iteratorError14;\n        }\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  var astNode = object.astNode,\n      extensionASTNodes = object.extensionASTNodes;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes || [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  return flatMap(getAllNodes(object), function (item) {\n    return getter(item) || [];\n  });\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, function (typeNode) {\n    return typeNode.interfaces;\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, function (unionNode) {\n    return unionNode.types;\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}\n"],"file":"validate.js"}